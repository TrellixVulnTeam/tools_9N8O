{"ast":null,"code":"var _jsxFileName = \"/home/rashika/Documents/graphQL/client/src/component/graphs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { LIVEPEER_DATA, UNISWAP_DATA } from '../graphql/query';\nimport { useState } from 'react/cjs/react.development';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graph = _ref => {\n  _s();\n\n  let {\n    match,\n    setSubgraph\n  } = _ref;\n  useEffect(() => {\n    if (match.params.graph === 'uniswap') {\n      setSubgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2');\n    } else if (match.params.graph === 'livepeer') {\n      setSubgraph('https://api.thegraph.com/subgraphs/name/livepeer/livepeer');\n    }\n\n    getData();\n  }, [match.params.graph]);\n\n  const Query = () => {\n    if (match.params.graph === 'uniswap') return UNISWAP_DATA;else if (match.params.graph === 'livepeer') return LIVEPEER_DATA;\n  };\n\n  const [getData, {\n    data,\n    error,\n    loading\n  }] = useLazyQuery(Query());\n\n  if (error) {\n    console.log(error);\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Error found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 46\n    }, this);\n  }\n\n  ;\n\n  if (data) {\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: match.params.graph === 'uniswap' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            width: \"100%\",\n            textAlign: \"center\"\n          },\n          children: \"Pairs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), data ? data.pairs.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"450px\",\n            backgroundColor: \"skyblue\",\n            border: \"black solid 2px\",\n            margin: \".5px\",\n            padding: \".5rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"ID : \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 46\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"reserveUSD :\", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: item.reserveUSD\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 58\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 41\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 33\n        }, this)) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            width: \"100%\",\n            textAlign: \"center\"\n          },\n          children: \"Transcoders\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 30\n        }, this), data ? data.transcoders.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"450px\",\n            backgroundColor: \"skyblue\",\n            border: \"black solid 2px\",\n            margin: \".5px\",\n            padding: \".5rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Total Stake : \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: item.totalStake\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"serviceURI :\", /*#__PURE__*/_jsxDEV(\"b\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 49\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }, this)) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Graph, \"F7x/9eIpy5Iwkp9IJFT0fxPFDaE=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/rashika/Documents/graphQL/client/src/component/graphs.js"],"names":["React","useEffect","useLazyQuery","LIVEPEER_DATA","UNISWAP_DATA","useState","Graph","match","setSubgraph","params","graph","getData","Query","data","error","loading","console","log","width","display","justifyContent","flexWrap","textAlign","pairs","map","item","i","backgroundColor","border","margin","padding","id","reserveUSD","transcoders","totalStake"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport {useLazyQuery} from '@apollo/client';\nimport { LIVEPEER_DATA, UNISWAP_DATA } from '../graphql/query';\nimport { useState } from 'react/cjs/react.development';\n\nconst Graph = ({match, setSubgraph}) => {\n\n\n    useEffect(()=>{\n\n        if(match.params.graph === 'uniswap'){\n            setSubgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2');\n        }\n        else if(match.params.graph === 'livepeer'){\n            setSubgraph('https://api.thegraph.com/subgraphs/name/livepeer/livepeer')\n        }\n        getData();\n          },[match.params.graph,]);\n          \n       const Query = () => {\n          if(match.params.graph === 'uniswap')return UNISWAP_DATA;\n          else if(match.params.graph === 'livepeer') return LIVEPEER_DATA; \n       }   \n\nconst [getData, { data, error, loading }] = useLazyQuery(Query());\n    \n      if (error){ console.log(error); return <h1> Error found</h1>};\n    \n      if (data) {\n        console.log(data);\n      }\n\n   \n\n    return ( <div>\n        {\n            (!loading)?\n            <div>\n                {\n                    (match.params.graph === 'uniswap')?\n                    <div style={{width:\"100%\", display:\"flex\", justifyContent:\"center\", flexWrap:\"wrap\"}}>\n                        <h1 style={{width:\"100%\", textAlign:\"center\"}}>Pairs</h1>\n                        {\n                            data?data.pairs.map((item, i) => (\n                                <div key={i} style={{width:\"450px\", backgroundColor:\"skyblue\", border:\"black solid 2px\", margin:\".5px\", padding:\".5rem\"}}>\n                                    <div>\n                                        ID : <b>{item.id}</b>\n                                        </div>\n                                        <div>reserveUSD :<b>{item.reserveUSD}</b>\n                                            </div>\n                                    </div>\n\n                            )):null\n                        }\n                        </div>\n                        :\n                        <div style={{width:\"100%\", display:\"flex\", justifyContent:\"center\", flexWrap:\"wrap\"}}>\n                             <h1 style={{width:\"100%\", textAlign:\"center\"}}>Transcoders</h1>\n                     {   data?data.transcoders.map((item, i) => (\n                                <div key={i} style={{width:\"450px\", backgroundColor:\"skyblue\", border:\"black solid 2px\", margin:\".5px\", padding:\".5rem\"}}>\n                                    <div>Total Stake : <b>{item.totalStake}</b>\n                                    </div>\n                                    <div>\n                                    serviceURI :<b>{}</b>\n                                        </div>\n                                    </div>\n                            )):null\n                        }\n                            </div>\n\n                }\n                </div>:\n                <div>\n                    Loading....\n                    </div>\n        }\n    </div> );\n}\n \nexport default Graph;"]},"metadata":{},"sourceType":"module"}