{"ast":null,"code":"var _jsxFileName = \"/home/rashika/Documents/graphQL/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Home from './component/home';\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport Graph from './component/graphs';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { useState } from 'react/cjs/react.development';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [subgraphEndpoint, setGraphEndpoint] = useState(\"https://api.thegraph.com/subgraphs/name/livepeer/livepeer\");\n\n  const setNewGraphEndpoint = grapgEndpoint => {\n    setGraphEndpoint();\n  };\n\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: subgraphEndpoint\n  });\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    className: \"App\",\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        setGraphEndpoint: setGraphEndpoint,\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/:graph/:subgraph\",\n        exact: true,\n        component: Graph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QbYPVoDK9c3DGGa2kaGg7ebcJzM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rashika/Documents/graphQL/client/src/App.js"],"names":["Home","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","Graph","Route","BrowserRouter","useState","App","subgraphEndpoint","setGraphEndpoint","setNewGraphEndpoint","grapgEndpoint","client","cache","uri"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,IAAP,MAAiB,kBAAjB;AACA,SAAQC,cAAR,EAAuBC,YAAvB,EAAoCC,QAApC,EAA8CC,aAA9C,QAAkE,gBAAlE;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAAQC,KAAR,EAAeC,aAAf,QAAmC,kBAAnC;AACA,SAASC,QAAT,QAAyB,6BAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,gBAAD,EAAmBC,gBAAnB,IAAuCH,QAAQ,CAAC,2DAAD,CAArD;;AACA,QAAMI,mBAAmB,GAAIC,aAAD,IAAmB;AAC7CF,IAAAA,gBAAgB;AACjB,GAFD;;AAIA,QAAMG,MAAM,GAAG,IAAIZ,YAAJ,CAAiB;AAChCa,IAAAA,KAAK,EAAE,IAAIX,aAAJ,EADyB;AAEhCY,IAAAA,GAAG,EAACN;AAF4B,GAAjB,CAAf;AAKA,sBACE,QAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,KAA1B;AAAgC,IAAA,MAAM,EAAEI,MAAxC;AAAA,2BACE,QAAC,aAAD;AAAA,8BACA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAiB,QAAA,KAAK,MAAtB;AAAuB,QAAA,gBAAgB,EAAEH,gBAAzC;AAA2D,QAAA,SAAS,EAAGX;AAAvE;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,KAAD;AAAO,QAAA,IAAI,EAAE,mBAAb;AAAiC,QAAA,KAAK,MAAtC;AAAuC,QAAA,SAAS,EAAEK;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GApBQI,G;;KAAAA,G;AAsBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Home from './component/home';\nimport {ApolloProvider,ApolloClient,HttpLink, InMemoryCache} from '@apollo/client';\nimport Graph from './component/graphs';\nimport {Route, BrowserRouter} from 'react-router-dom';\nimport { useState } from 'react/cjs/react.development';\n\nfunction App() {\n\n  const [subgraphEndpoint, setGraphEndpoint] = useState(\"https://api.thegraph.com/subgraphs/name/livepeer/livepeer\");\n  const setNewGraphEndpoint = (grapgEndpoint) => {\n    setGraphEndpoint()\n  }\n\n  const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri:subgraphEndpoint\n  });\n\n  return (\n    <ApolloProvider className=\"App\" client={client}>\n      <BrowserRouter>\n      <Route path=\"/\"  exact setGraphEndpoint={setGraphEndpoint} component ={Home}></Route>\n      <Route path =\"/:graph/:subgraph\" exact component={Graph}></Route>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}