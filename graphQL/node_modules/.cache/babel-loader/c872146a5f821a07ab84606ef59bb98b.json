{"ast":null,"code":"var _jsxFileName = \"/home/rashika/Documents/graphQL/client/src/component/graphs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { LIVEPEER_DATA } from '../graphql/query';\nimport { useState } from 'react/cjs/react.development';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graph = _ref => {\n  _s();\n\n  let {\n    match,\n    setSubgraph\n  } = _ref;\n  const [query, setQuery] = useState('');\n  useEffect(() => {\n    console.log(match.params.graph);\n    console.log(match.params.subgraph);\n\n    if (match.params.graph === 'uniswap') {\n      setSubgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2');\n    } else if (match.params.graph === 'livepeer') {\n      setSubgraph('https://api.thegraph.com/subgraphs/name/livepeer/livepeer');\n    }\n\n    getData();\n  }, [match.params.graph]);\n  const [getData, {\n    data,\n    error,\n    loading\n  }] = useLazyQuery(LIVEPEER_DATA);\n\n  if (error) {\n    console.log(error);\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Error found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 46\n    }, this);\n  }\n\n  ;\n\n  if (data) {\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Graph, \"t+IzizIQ/LmocQtuioMldewvt4A=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/rashika/Documents/graphQL/client/src/component/graphs.js"],"names":["React","useEffect","useLazyQuery","LIVEPEER_DATA","useState","Graph","match","setSubgraph","query","setQuery","console","log","params","graph","subgraph","getData","data","error","loading"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,QAAT,QAAyB,6BAAzB;;;AAEA,MAAMC,KAAK,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAyB;AAEpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,MAAN,CAAaC,KAAzB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,MAAN,CAAaE,QAAzB;;AAEA,QAAGR,KAAK,CAACM,MAAN,CAAaC,KAAb,KAAuB,SAA1B,EAAoC;AAChCN,MAAAA,WAAW,CAAC,4DAAD,CAAX;AACH,KAFD,MAGK,IAAGD,KAAK,CAACM,MAAN,CAAaC,KAAb,KAAuB,UAA1B,EAAqC;AACtCN,MAAAA,WAAW,CAAC,2DAAD,CAAX;AACH;;AACDQ,IAAAA,OAAO;AACJ,GAXE,EAWD,CAACT,KAAK,CAACM,MAAN,CAAaC,KAAd,CAXC,CAAT;AAaJ,QAAM,CAACE,OAAD,EAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAV,IAAsChB,YAAY,CAACC,aAAD,CAAxD;;AAEM,MAAIc,KAAJ,EAAU;AAAEP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AAAoB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAA6B;;AAAA;;AAE7D,MAAID,IAAJ,EAAU;AACRN,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACD;;AAIH,sBAAS;AAAA,cAEA,CAACE,OAAF,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,gBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANH;AAAA;AAAA;AAAA;AAAA,UAAT;AAWH,CAtCD;;GAAMb,K;UAiBsCH,Y;;;KAjBtCG,K;AAwCN,eAAeA,KAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {useLazyQuery} from '@apollo/client';\nimport { LIVEPEER_DATA } from '../graphql/query';\nimport { useState } from 'react/cjs/react.development';\n\nconst Graph = ({match, setSubgraph}) => {\n\n    const [query, setQuery] = useState('');\n\n    useEffect(()=>{\n        console.log(match.params.graph);\n        console.log(match.params.subgraph);\n\n        if(match.params.graph === 'uniswap'){\n            setSubgraph('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2')\n        }\n        else if(match.params.graph === 'livepeer'){\n            setSubgraph('https://api.thegraph.com/subgraphs/name/livepeer/livepeer')\n        }\n        getData();\n          },[match.params.graph]) \n\nconst [getData, { data, error, loading }] = useLazyQuery(LIVEPEER_DATA);\n    \n      if (error){ console.log(error); return <h1> Error found</h1>};\n    \n      if (data) {\n        console.log(data);\n      }\n\n   \n\n    return ( <div>\n        {\n            (!loading)?\n            <div>\n                Done\n                </div>:\n                <div>\n                    Loading....\n                    </div>\n        }\n    </div> );\n}\n \nexport default Graph;"]},"metadata":{},"sourceType":"module"}