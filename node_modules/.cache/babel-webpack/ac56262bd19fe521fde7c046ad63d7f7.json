{"ast":null,"code":"import _asyncToGenerator from \"/home/cynefin/Desktop/Metamask login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nexport class AppComponent {\n  constructor() {\n    var _this = this;\n\n    this.accounts = [];\n    this.currentAccount = '';\n    this.chainId = '';\n    this.getAcc = /*#__PURE__*/_asyncToGenerator(function* () {\n      _this.accounts = yield window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      _this.chainId = yield window.ethereum.request({\n        method: 'eth_chainId'\n      });\n      console.log(_this.accounts);\n      _this.currentAccount = _this.accounts[0];\n    });\n    this.loadweb3();\n  }\n\n  title(title) {\n    throw new Error('Method not implemented.');\n  }\n\n  loadweb3() {\n    return _asyncToGenerator(function* () {\n      if (window.ethereum) {\n        console.log('success');\n      } else {\n        window.alert('Non-ethereum browser detected');\n      }\n    })();\n  }\n\n  if(chainId) {}\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 8,\n  vars: 2,\n  consts: [[1, \"EthereumBtn\", 3, \"click\"], [1, \"information\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelementStart(1, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_1_listener() {\n        return ctx.getAcc();\n      });\n      i0.ɵɵtext(2, \"Get Ethereum\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1);\n      i0.ɵɵelementStart(4, \"h3\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"h3\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\"Account Address: \", ctx.currentAccount, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"ChainId : \", ctx.chainId, \"\");\n    }\n  },\n  styles: [\"div[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 10vh;\\n}\\n\\n.EthereumBtn[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  padding: 32px;\\n  background-color: #3F0071;\\n  color: white;\\n  border: none;\\n  border-radius: 10px;\\n  font-size: x-large;\\n}\\n\\n.EthereumBtn[_ngcontent-%COMP%]:hover {\\n  background-color: #610094;\\n  cursor: pointer;\\n}\\n\\n.information[_ngcontent-%COMP%] {\\n  display: block;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsWUFBWTtBQUNkOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYix5QkFBeUI7RUFDekIsWUFBWTtFQUNaLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxjQUFjO0VBQ2Qsa0JBQWtCO0FBQ3BCIiwiZmlsZSI6ImFwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2IHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGhlaWdodDogMTB2aDtcbn1cblxuLkV0aGVyZXVtQnRuIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgcGFkZGluZzogMzJweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNGMDA3MTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGZvbnQtc2l6ZTogeC1sYXJnZTtcbn1cblxuLkV0aGVyZXVtQnRuOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYxMDA5NDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uaW5mb3JtYXRpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuIl19 */\"]\n});\nAppComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppComponent,\n  factory: AppComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/cynefin/Desktop/Metamask login/src/app/app.component.ts","/home/cynefin/Desktop/Metamask login/src/app/app.component.html"],"names":[],"mappings":";;AAYA,OAAM,MAAO,YAAP,CAAmB;AAKvB,EAAA,WAAA,GAAA;AAAA;;AAKA,SAAA,QAAA,GAA0B,EAA1B;AACA,SAAA,cAAA,GAAyB,EAAzB;AACA,SAAA,OAAA,GAAkB,EAAlB;AAUA,SAAA,MAAA,kCAAS,aAAW;AAClB,MAAA,KAAI,CAAC,QAAL,SAAsB,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB;AAAE,QAAA,MAAM,EAAE;AAAV,OAAxB,CAAtB;AACA,MAAA,KAAI,CAAC,OAAL,SAAqB,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB;AAAE,QAAA,MAAM,EAAE;AAAV,OAAxB,CAArB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,KAAI,CAAC,QAAjB;AACA,MAAA,KAAI,CAAC,cAAL,GAAsB,KAAI,CAAC,QAAL,CAAc,CAAd,CAAtB;AACD,KALD;AAhBE,SAAK,QAAL;AACD;;AAND,EAAA,KAAK,CAAC,KAAD,EAAW;AACd,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAWK,EAAA,QAAQ,GAAA;AAAA;AACZ,UAAI,MAAM,CAAC,QAAX,EAAqB;AACnB,QAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACD,OAFD,MAEO;AACL,QAAA,MAAM,CAAC,KAAP,CAAa,+BAAb;AACD;AALW;AAMb;;AAUD,EAAA,EAAE,CAAC,OAAD,EAAe,CAEhB;;AAhCsB;;;mBAAZ,Y;AAAY,C;;;QAAZ,Y;AAAY,EAAA,SAAA,EAAA,CAAA,CAAA,UAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,qBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACZzB,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA;AAA4B,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,6CAAA,GAAA;AAAA,eAAS,GAAA,CAAA,MAAA,EAAT;AAAiB,OAAjB;AAAmB,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,cAAA;AAAY,MAAA,EAAA,CAAA,YAAA;AAC7D,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA;AAAI,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAmC,MAAA,EAAA,CAAA,YAAA;AACvC,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA;AAAI,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAqB,MAAA,EAAA,CAAA,YAAA;AAC3B,MAAA,EAAA,CAAA,YAAA;;;;AAFM,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,kBAAA,CAAA,mBAAA,EAAA,GAAA,CAAA,cAAA,EAAA,EAAA;AACA,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,GAAA,CAAA,OAAA,EAAA,EAAA;;;;;;SDOO,Y;AAAY,EAAA,OAAA,EAAZ,YAAY,CAAA,I;AAAA,EAAA,UAAA,EAPX","sourcesContent":["import { analyzeAndValidateNgModules } from '@angular/compiler';\nimport { prepareEventListenerParameters } from '@angular/compiler/src/render3/view/template';\nimport { Component,Injectable } from '@angular/core';\ndeclare let window: any;\n@Injectable({\n  providedIn: 'root'\n})\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title(title: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  constructor() {\n    this.loadweb3();\n  }\n\n  web3: any;\n  accounts: Array<String> = [];\n  currentAccount: String = '';\n  chainId: String = '';\n\n  async loadweb3() {\n    if (window.ethereum) {\n      console.log('success');\n    } else {\n      window.alert('Non-ethereum browser detected');\n    }\n  }\n  \n  getAcc = async () => {\n    this.accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    this.chainId = await window.ethereum.request({ method: 'eth_chainId' });\n    console.log(this.accounts);\n    this.currentAccount = this.accounts[0];\n  }\n\n\n  if(chainId:String) {\n    \n  }\n}\n","<div>\n  <button class=\"EthereumBtn\" (click)=\"getAcc()\">Get Ethereum</button>\n</div>\n<div class=\"information\">\n  <h3>Account Address: {{currentAccount}}</h3>\n  <h3>ChainId : {{chainId}}</h3>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}