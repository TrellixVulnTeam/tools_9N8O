{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Hardfork = exports.Chain = exports.CustomChain = void 0;\n\nvar events_1 = require(\"events\");\n\nvar crc_32_1 = require(\"crc-32\");\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar chains_1 = require(\"./chains\");\n\nvar hardforks_1 = require(\"./hardforks\");\n\nvar eips_1 = require(\"./eips\");\n\nvar CustomChain;\n\n(function (CustomChain) {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n\n  CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n\n  CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n\n  CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\n\nvar Chain;\n\n(function (Chain) {\n  Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n  Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n  Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  Chain[Chain[\"Kovan\"] = 42] = \"Kovan\";\n  Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n  Chain[Chain[\"Calaveras\"] = 123] = \"Calaveras\";\n})(Chain = exports.Chain || (exports.Chain = {}));\n\nvar Hardfork;\n\n(function (Hardfork) {\n  Hardfork[\"Chainstart\"] = \"chainstart\";\n  Hardfork[\"Homestead\"] = \"homestead\";\n  Hardfork[\"Dao\"] = \"dao\";\n  Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n  Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n  Hardfork[\"Byzantium\"] = \"byzantium\";\n  Hardfork[\"Constantinople\"] = \"constantinople\";\n  Hardfork[\"Petersburg\"] = \"petersburg\";\n  Hardfork[\"Istanbul\"] = \"istanbul\";\n  Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n  Hardfork[\"Berlin\"] = \"berlin\";\n  Hardfork[\"London\"] = \"london\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\n\n\nvar Common = function (_super) {\n  __extends(Common, _super);\n  /**\n   * @constructor\n   */\n\n\n  function Common(opts) {\n    var _a, _b;\n\n    var _this = _super.call(this) || this;\n\n    _this._supportedHardforks = [];\n    _this._eips = [];\n    _this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];\n    _this._chainParams = _this.setChain(opts.chain);\n    _this.DEFAULT_HARDFORK = (_b = _this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Istanbul;\n    _this._hardfork = _this.DEFAULT_HARDFORK;\n\n    if (opts.supportedHardforks) {\n      _this._supportedHardforks = opts.supportedHardforks;\n    }\n\n    if (opts.hardfork) {\n      _this.setHardfork(opts.hardfork);\n    }\n\n    if (opts.eips) {\n      _this.setEIPs(opts.eips);\n    }\n\n    return _this;\n  }\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n\n\n  Common.custom = function (chainParamsOrName, opts) {\n    var _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n\n    var standardChainParams = __assign({}, Common._getChainParams(baseChain));\n\n    standardChainParams['name'] = 'custom-chain';\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common(__assign({\n        chain: __assign(__assign({}, standardChainParams), chainParamsOrName)\n      }, opts));\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom({\n          name: CustomChain.PolygonMainnet,\n          chainId: 137,\n          networkId: 137\n        });\n      }\n\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom({\n          name: CustomChain.PolygonMumbai,\n          chainId: 80001,\n          networkId: 80001\n        });\n      }\n\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom({\n          name: CustomChain.ArbitrumRinkebyTestnet,\n          chainId: 421611,\n          networkId: 421611\n        });\n      }\n\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom({\n          name: CustomChain.xDaiChain,\n          chainId: 100,\n          networkId: 100\n        });\n      }\n\n      throw new Error(\"Custom chain \" + chainParamsOrName + \" not supported\");\n    }\n  };\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n\n\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n\n    return new Common({\n      chain: __assign(__assign({}, standardChainParams), customChainParams),\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks\n    });\n  };\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n\n\n  Common.isSupportedChainId = function (chainId) {\n    var initializedChains = chains_1._getInitializedChains();\n\n    return Boolean(initializedChains['names'][chainId.toString()]);\n  };\n\n  Common._getChainParams = function (chain, customChains) {\n    var initializedChains = chains_1._getInitializedChains(customChains);\n\n    if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {\n      chain = chain.toString();\n\n      if (initializedChains['names'][chain]) {\n        var name_1 = initializedChains['names'][chain];\n        return initializedChains[name_1];\n      }\n\n      throw new Error(\"Chain with ID \" + chain + \" not supported\");\n    }\n\n    if (initializedChains[chain]) {\n      return initializedChains[chain];\n    }\n\n    throw new Error(\"Chain with name \" + chain + \" not supported\");\n  };\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n\n\n  Common.prototype.setChain = function (chain) {\n    var e_1, _a;\n\n    if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {\n      this._chainParams = Common._getChainParams(chain, this._customChains);\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');\n      }\n\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\n      try {\n        for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {\n          var param = required_1_1.value;\n\n          if (chain[param] === undefined) {\n            throw new Error(\"Missing required chain parameter: \" + param);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n\n    return this._chainParams;\n  };\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium')\n   */\n\n\n  Common.prototype.setHardfork = function (hardfork) {\n    var e_2, _a;\n\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n\n    var existing = false;\n\n    try {\n      for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {\n        var hfChanges = HARDFORK_CHANGES_1_1.value;\n\n        if (hfChanges[0] === hardfork) {\n          if (this._hardfork !== hardfork) {\n            this._hardfork = hardfork;\n            this.emit('hardforkChanged', hardfork);\n          }\n\n          existing = true;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (!existing) {\n      throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n    }\n  };\n  /**\n   * Returns the hardfork based on the block number provided\n   * @param blockNumber\n   * @returns The name of the HF\n   */\n\n\n  Common.prototype.getHardforkByBlockNumber = function (blockNumber) {\n    var e_3, _a;\n\n    blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    var hardfork = Hardfork.Chainstart;\n\n    try {\n      for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var hf = _c.value; // Skip comparison for not applied HFs\n\n        if (hf.block === null) {\n          continue;\n        }\n\n        if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {\n          hardfork = hf.name;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return hardfork;\n  };\n  /**\n   * Sets a new hardfork based on the block number provided\n   * @param blockNumber\n   * @returns The name of the HF set\n   */\n\n\n  Common.prototype.setHardforkByBlockNumber = function (blockNumber) {\n    blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    var hardfork = this.getHardforkByBlockNumber(blockNumber);\n    this.setHardfork(hardfork);\n    return hardfork;\n  };\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n\n\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    if (onlySupported === void 0) {\n      onlySupported = true;\n    }\n\n    if (!hardfork) {\n      hardfork = this._hardfork;\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n\n    return hardfork;\n  };\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n\n\n  Common.prototype._getHardfork = function (hardfork) {\n    var e_4, _a;\n\n    var hfs = this.hardforks();\n\n    try {\n      for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {\n        var hf = hfs_1_1.value;\n        if (hf['name'] === hardfork) return hf;\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n  };\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n\n\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    var e_5, _a;\n\n    if (this._supportedHardforks.length > 0) {\n      try {\n        for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var supportedHf = _c.value;\n          if (hardfork === supportedHf) return true;\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n    } else {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n\n\n  Common.prototype.setEIPs = function (eips) {\n    var e_6, _a;\n\n    var _this = this;\n\n    if (eips === void 0) {\n      eips = [];\n    }\n\n    var _loop_1 = function _loop_1(eip) {\n      if (!(eip in eips_1.EIPs)) {\n        throw new Error(eip + \" not supported\");\n      }\n\n      var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n\n      if (!minHF) {\n        throw new Error(eip + \" cannot be activated on hardfork \" + this_1.hardfork() + \", minimumHardfork: \" + minHF);\n      }\n\n      if (eips_1.EIPs[eip].requiredEIPs) {\n        // eslint-disable-next-line prettier/prettier\n        eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {\n          if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {\n            throw new Error(eip + \" requires EIP \" + elem + \", but is not included in the EIP list\");\n          }\n        });\n      }\n    };\n\n    var this_1 = this;\n\n    try {\n      for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {\n        var eip = eips_2_1.value;\n\n        _loop_1(eip);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    this._eips = eips;\n  };\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n\n\n  Common.prototype.param = function (topic, name) {\n    var e_7, _a; // TODO: consider the case that different active EIPs\n    // can change the same parameter\n\n\n    var value = null;\n\n    try {\n      for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var eip = _c.value;\n        value = this.paramByEIP(topic, name, eip);\n\n        if (value !== null) {\n          return value;\n        }\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n\n    return this.paramByHardfork(topic, name, this._hardfork);\n  };\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n\n\n  Common.prototype.paramByHardfork = function (topic, name, hardfork) {\n    var e_8, _a, e_9, _b;\n\n    hardfork = this._chooseHardfork(hardfork);\n    var value = null;\n\n    try {\n      for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {\n        var hfChanges = HARDFORK_CHANGES_2_1.value; // EIP-referencing HF file (e.g. berlin.json)\n\n        if (hfChanges[1].hasOwnProperty('eips')) {\n          // eslint-disable-line\n          var hfEIPs = hfChanges[1]['eips'];\n\n          try {\n            for (var hfEIPs_1 = (e_9 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {\n              var eip = hfEIPs_1_1.value;\n              var valueEIP = this.paramByEIP(topic, name, eip);\n              value = valueEIP !== null ? valueEIP : value;\n            }\n          } catch (e_9_1) {\n            e_9 = {\n              error: e_9_1\n            };\n          } finally {\n            try {\n              if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);\n            } finally {\n              if (e_9) throw e_9.error;\n            }\n          } // Paramater-inlining HF file (e.g. istanbul.json)\n\n        } else {\n          if (!hfChanges[1][topic]) {\n            throw new Error(\"Topic \" + topic + \" not defined\");\n          }\n\n          if (hfChanges[1][topic][name] !== undefined) {\n            value = hfChanges[1][topic][name].v;\n          }\n        }\n\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n\n\n  Common.prototype.paramByEIP = function (topic, name, eip) {\n    if (!(eip in eips_1.EIPs)) {\n      throw new Error(eip + \" not supported\");\n    }\n\n    var eipParams = eips_1.EIPs[eip];\n\n    if (!(topic in eipParams)) {\n      throw new Error(\"Topic \" + topic + \" not defined\");\n    }\n\n    if (eipParams[topic][name] === undefined) {\n      return null;\n    }\n\n    var value = eipParams[topic][name].v;\n    return value;\n  };\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n\n\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.paramByHardfork(topic, name, hardfork);\n  };\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n\n\n  Common.prototype.isActivatedEIP = function (eip) {\n    var e_10, _a;\n\n    if (this.eips().includes(eip)) {\n      return true;\n    }\n\n    try {\n      for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {\n        var hfChanges = HARDFORK_CHANGES_3_1.value;\n        var hf = hfChanges[1];\n\n        if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n          if (hf['eips'].includes(eip)) {\n            return true;\n          }\n        }\n      }\n    } catch (e_10_1) {\n      e_10 = {\n        error: e_10_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);\n      } finally {\n        if (e_10) throw e_10.error;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n\n\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    var _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlockBN(hardfork);\n\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n\n\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n\n\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    var e_11, _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n\n    var posHf1 = -1,\n        posHf2 = -1;\n    var index = 0;\n\n    try {\n      for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {\n        var hf = hardforks_2_1.value;\n        if (hf['name'] === hardfork1) posHf1 = index;\n        if (hf['name'] === hardfork2) posHf2 = index;\n        index += 1;\n      }\n    } catch (e_11_1) {\n      e_11 = {\n        error: e_11_1\n      };\n    } finally {\n      try {\n        if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);\n      } finally {\n        if (e_11) throw e_11.error;\n      }\n    }\n\n    return posHf1 >= posHf2 && posHf2 !== -1;\n  };\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n\n\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n\n\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    var e_12, _a;\n\n    var _b;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n\n    try {\n      for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var hf = _d.value;\n        if (hf['name'] === hardfork && hf['block'] !== null) return true;\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n\n\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    var e_13, _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n\n    try {\n      for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {\n        var hf = hfs_2_1.value;\n        if (hf['block'] === null) continue;\n        if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n        if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n        activeHardforks.push(hf);\n      }\n    } catch (e_13_1) {\n      e_13 = {\n        error: e_13_1\n      };\n    } finally {\n      try {\n        if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);\n      } finally {\n        if (e_13) throw e_13.error;\n      }\n    }\n\n    return activeHardforks;\n  };\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n\n\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number\n   * @deprecated Please use hardforkBlockBN() for large number support\n   */\n\n\n  Common.prototype.hardforkBlock = function (hardfork) {\n    return ethereumjs_util_1.toType(this.hardforkBlockBN(hardfork), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number\n   */\n\n\n  Common.prototype.hardforkBlockBN = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    return new ethereumjs_util_1.BN(this._getHardfork(hardfork)['block']);\n  };\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n\n\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    hardfork = this._chooseHardfork(hardfork, false);\n    return this.hardforkBlockBN(hardfork).eq(blockNumber);\n  };\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use nextHardforkBlockBN() for large number support\n   */\n\n\n  Common.prototype.nextHardforkBlock = function (hardfork) {\n    var block = this.nextHardforkBlockBN(hardfork);\n    return block === null ? null : ethereumjs_util_1.toType(block, ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n\n\n  Common.prototype.nextHardforkBlockBN = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    var hfBlock = this.hardforkBlockBN(hardfork); // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n\n    var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n      var block = new ethereumjs_util_1.BN(hf.block);\n      return block.gt(hfBlock) && acc === null ? block : acc;\n    }, null);\n    return nextHfBlock;\n  };\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n\n\n  Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {\n    blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    hardfork = this._chooseHardfork(hardfork, false);\n    var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);\n  };\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n\n\n  Common.prototype._calcForkHash = function (hardfork) {\n    var e_14, _a;\n\n    var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');\n    var hfBuffer = Buffer.alloc(0);\n    var prevBlock = 0;\n\n    try {\n      for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var hf = _c.value;\n        var block = hf.block; // Skip for chainstart (0), not applied HFs (null) and\n        // when already applied on same block number HFs\n\n        if (block !== 0 && block !== null && block !== prevBlock) {\n          var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');\n          hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n        }\n\n        if (hf.name === hardfork) break;\n        prevBlock = block;\n      }\n    } catch (e_14_1) {\n      e_14 = {\n        error: e_14_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_14) throw e_14.error;\n      }\n    }\n\n    var inputBuffer = Buffer.concat([genesis, hfBuffer]); // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n\n    var forkhash = ethereumjs_util_1.intToBuffer(crc_32_1.buf(inputBuffer) >>> 0).toString('hex');\n    return \"0x\" + forkhash;\n  };\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n\n\n  Common.prototype.forkHash = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n\n    var data = this._getHardfork(hardfork);\n\n    if (data['block'] === null) {\n      var msg = 'No fork hash calculation possible for non-applied or future hardfork';\n      throw new Error(msg);\n    }\n\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash'];\n    }\n\n    return this._calcForkHash(hardfork);\n  };\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n\n\n  Common.prototype.hardforkForForkHash = function (forkHash) {\n    var resArray = this.hardforks().filter(function (hf) {\n      return hf.forkHash === forkHash;\n    });\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n  };\n  /**\n   * Returns the Genesis parameters of current chain\n   * @returns Genesis dictionary\n   */\n\n\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n\n\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n\n\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n\n\n  Common.prototype.dnsNetworks = function () {\n    return this._chainParams['dnsNetworks'];\n  };\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n\n\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use chainIdBN() for large number support\n   */\n\n\n  Common.prototype.chainId = function () {\n    return ethereumjs_util_1.toType(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n\n\n  Common.prototype.chainIdBN = function () {\n    return new ethereumjs_util_1.BN(this._chainParams['chainId']);\n  };\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n\n\n  Common.prototype.chainName = function () {\n    return this._chainParams['name'];\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use networkIdBN() for large number support\n   */\n\n\n  Common.prototype.networkId = function () {\n    return ethereumjs_util_1.toType(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n\n\n  Common.prototype.networkIdBN = function () {\n    return new ethereumjs_util_1.BN(this._chainParams['networkId']);\n  };\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n\n\n  Common.prototype.eips = function () {\n    return this._eips;\n  };\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"\n   */\n\n\n  Common.prototype.consensusType = function () {\n    return this._chainParams['consensus']['type'];\n  };\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type or\n   * \"clique\" for \"poa\" consensus type\n   */\n\n\n  Common.prototype.consensusAlgorithm = function () {\n    return this._chainParams['consensus']['algorithm'];\n  };\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   */\n\n\n  Common.prototype.consensusConfig = function () {\n    return this._chainParams['consensus'][this.consensusAlgorithm()];\n  };\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n\n\n  Common.prototype.copy = function () {\n    return Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n  };\n\n  return Common;\n}(events_1.EventEmitter);\n\nexports.default = Common;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/common/dist.browser/index.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","Symbol","iterator","m","next","value","done","TypeError","defineProperty","exports","Hardfork","Chain","CustomChain","events_1","require","crc_32_1","ethereumjs_util_1","chains_1","hardforks_1","eips_1","Common","_super","opts","_a","_b","_this","_supportedHardforks","_eips","_customChains","customChains","_chainParams","setChain","chain","DEFAULT_HARDFORK","defaultHardfork","Istanbul","_hardfork","supportedHardforks","hardfork","setHardfork","eips","setEIPs","custom","chainParamsOrName","baseChain","standardChainParams","_getChainParams","PolygonMainnet","name","chainId","networkId","PolygonMumbai","ArbitrumRinkebyTestnet","xDaiChain","Error","forCustomChain","customChainParams","isSupportedChainId","initializedChains","_getInitializedChains","Boolean","toString","BN","isBN","name_1","e_1","required","required_1","required_1_1","param","undefined","e_1_1","error","return","e_2","_isSupportedHardfork","existing","HARDFORK_CHANGES_1","hardforks","HARDFORK_CHANGES_1_1","hfChanges","emit","e_2_1","getHardforkByBlockNumber","blockNumber","e_3","toType","TypeOutput","Chainstart","_c","hf","block","gte","e_3_1","setHardforkByBlockNumber","_chooseHardfork","onlySupported","_getHardfork","e_4","hfs","hfs_1","hfs_1_1","e_4_1","chainName","e_5","supportedHf","e_5_1","e_6","_loop_1","eip","EIPs","minHF","this_1","gteHardfork","requiredEIPs","forEach","elem","includes","isActivatedEIP","eips_2","eips_2_1","e_6_1","topic","e_7","paramByEIP","e_7_1","paramByHardfork","e_8","e_9","HARDFORK_CHANGES_2","HARDFORK_CHANGES_2_1","hfEIPs","hfEIPs_1","hfEIPs_1_1","valueEIP","e_9_1","v","e_8_1","eipParams","paramByBlock","activeHfs","activeHardforks","e_10","HARDFORK_CHANGES_3","HARDFORK_CHANGES_3_1","e_10_1","hardforkIsActiveOnBlock","hfBlock","hardforkBlockBN","activeOnBlock","hardforkGteHardfork","hardfork1","hardfork2","e_11","onlyActive","posHf1","posHf2","index","hardforks_2","hardforks_2_1","e_11_1","hardforkIsActiveOnChain","e_12","_d","e_12_1","e_13","hfs_2","hfs_2_1","push","e_13_1","activeHardfork","hardforkBlock","Number","isHardforkBlock","eq","nextHardforkBlock","nextHardforkBlockBN","nextHfBlock","reduce","acc","gt","isNextHardforkBlock","_calcForkHash","e_14","genesis","Buffer","from","hash","substr","hfBuffer","alloc","prevBlock","hfBlockBuffer","padStart","concat","e_14_1","inputBuffer","forkhash","intToBuffer","buf","forkHash","data","msg","hardforkForForkHash","resArray","filter","bootstrapNodes","dnsNetworks","chainIdBN","networkIdBN","consensusType","consensusAlgorithm","consensusConfig","copy","getPrototypeOf","EventEmitter","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Hardfork = exports.Chain = exports.CustomChain = void 0;\nvar events_1 = require(\"events\");\nvar crc_32_1 = require(\"crc-32\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\nvar eips_1 = require(\"./eips\");\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum Rinkeby Testnet\n     *\n     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n     */\n    CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n    Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Chain[Chain[\"Kovan\"] = 42] = \"Kovan\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Calaveras\"] = 123] = \"Calaveras\";\n})(Chain = exports.Chain || (exports.Chain = {}));\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nvar Common = /** @class */ (function (_super) {\n    __extends(Common, _super);\n    /**\n     * @constructor\n     */\n    function Common(opts) {\n        var _a, _b;\n        var _this = _super.call(this) || this;\n        _this._supportedHardforks = [];\n        _this._eips = [];\n        _this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];\n        _this._chainParams = _this.setChain(opts.chain);\n        _this.DEFAULT_HARDFORK = (_b = _this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Istanbul;\n        _this._hardfork = _this.DEFAULT_HARDFORK;\n        if (opts.supportedHardforks) {\n            _this._supportedHardforks = opts.supportedHardforks;\n        }\n        if (opts.hardfork) {\n            _this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            _this.setEIPs(opts.eips);\n        }\n        return _this;\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    Common.custom = function (chainParamsOrName, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n        var standardChainParams = __assign({}, Common._getChainParams(baseChain));\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common(__assign({ chain: __assign(__assign({}, standardChainParams), chainParamsOrName) }, opts));\n        }\n        else {\n            if (chainParamsOrName === CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                });\n            }\n            if (chainParamsOrName === CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                });\n            }\n            if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n                return Common.custom({\n                    name: CustomChain.ArbitrumRinkebyTestnet,\n                    chainId: 421611,\n                    networkId: 421611,\n                });\n            }\n            if (chainParamsOrName === CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                });\n            }\n            throw new Error(\"Custom chain \" + chainParamsOrName + \" not supported\");\n        }\n    };\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n     * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n     *\n     * @deprecated Use {@link Common.custom} instead\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common({\n            chain: __assign(__assign({}, standardChainParams), customChainParams),\n            hardfork: hardfork,\n            supportedHardforks: supportedHardforks,\n        });\n    };\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId BN id (`1`) of a standard chain\n     * @returns boolean\n     */\n    Common.isSupportedChainId = function (chainId) {\n        var initializedChains = chains_1._getInitializedChains();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    };\n    Common._getChainParams = function (chain, customChains) {\n        var initializedChains = chains_1._getInitializedChains(customChains);\n        if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                var name_1 = initializedChains['names'][chain];\n                return initializedChains[name_1];\n            }\n            throw new Error(\"Chain with ID \" + chain + \" not supported\");\n        }\n        if (initializedChains[chain]) {\n            return initializedChains[chain];\n        }\n        throw new Error(\"Chain with name \" + chain + \" not supported\");\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        var e_1, _a;\n        if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');\n            }\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            try {\n                for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {\n                    var param = required_1_1.value;\n                    if (chain[param] === undefined) {\n                        throw new Error(\"Missing required chain parameter: \" + param);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium')\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        var e_2, _a;\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        var existing = false;\n        try {\n            for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {\n                var hfChanges = HARDFORK_CHANGES_1_1.value;\n                if (hfChanges[0] === hardfork) {\n                    if (this._hardfork !== hardfork) {\n                        this._hardfork = hardfork;\n                        this.emit('hardforkChanged', hardfork);\n                    }\n                    existing = true;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        if (!existing) {\n            throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n        }\n    };\n    /**\n     * Returns the hardfork based on the block number provided\n     * @param blockNumber\n     * @returns The name of the HF\n     */\n    Common.prototype.getHardforkByBlockNumber = function (blockNumber) {\n        var e_3, _a;\n        blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        var hardfork = Hardfork.Chainstart;\n        try {\n            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var hf = _c.value;\n                // Skip comparison for not applied HFs\n                if (hf.block === null) {\n                    continue;\n                }\n                if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {\n                    hardfork = hf.name;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return hardfork;\n    };\n    /**\n     * Sets a new hardfork based on the block number provided\n     * @param blockNumber\n     * @returns The name of the HF set\n     */\n    Common.prototype.setHardforkByBlockNumber = function (blockNumber) {\n        blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        var hardfork = this.getHardforkByBlockNumber(blockNumber);\n        this.setHardfork(hardfork);\n        return hardfork;\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        if (onlySupported === void 0) { onlySupported = true; }\n        if (!hardfork) {\n            hardfork = this._hardfork;\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var e_4, _a;\n        var hfs = this.hardforks();\n        try {\n            for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {\n                var hf = hfs_1_1.value;\n                if (hf['name'] === hardfork)\n                    return hf;\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        var e_5, _a;\n        if (this._supportedHardforks.length > 0) {\n            try {\n                for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var supportedHf = _c.value;\n                    if (hardfork === supportedHf)\n                        return true;\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    Common.prototype.setEIPs = function (eips) {\n        var e_6, _a;\n        var _this = this;\n        if (eips === void 0) { eips = []; }\n        var _loop_1 = function (eip) {\n            if (!(eip in eips_1.EIPs)) {\n                throw new Error(eip + \" not supported\");\n            }\n            var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(eip + \" cannot be activated on hardfork \" + this_1.hardfork() + \", minimumHardfork: \" + minHF);\n            }\n            if (eips_1.EIPs[eip].requiredEIPs) {\n                // eslint-disable-next-line prettier/prettier\n                eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {\n                    if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {\n                        throw new Error(eip + \" requires EIP \" + elem + \", but is not included in the EIP list\");\n                    }\n                });\n            }\n        };\n        var this_1 = this;\n        try {\n            for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {\n                var eip = eips_2_1.value;\n                _loop_1(eip);\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        this._eips = eips;\n    };\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precendence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.param = function (topic, name) {\n        var e_7, _a;\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        var value = null;\n        try {\n            for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var eip = _c.value;\n                value = this.paramByEIP(topic, name, eip);\n                if (value !== null) {\n                    return value;\n                }\n            }\n        }\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_7) throw e_7.error; }\n        }\n        return this.paramByHardfork(topic, name, this._hardfork);\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.paramByHardfork = function (topic, name, hardfork) {\n        var e_8, _a, e_9, _b;\n        hardfork = this._chooseHardfork(hardfork);\n        var value = null;\n        try {\n            for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {\n                var hfChanges = HARDFORK_CHANGES_2_1.value;\n                // EIP-referencing HF file (e.g. berlin.json)\n                if (hfChanges[1].hasOwnProperty('eips')) { // eslint-disable-line\n                    var hfEIPs = hfChanges[1]['eips'];\n                    try {\n                        for (var hfEIPs_1 = (e_9 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {\n                            var eip = hfEIPs_1_1.value;\n                            var valueEIP = this.paramByEIP(topic, name, eip);\n                            value = valueEIP !== null ? valueEIP : value;\n                        }\n                    }\n                    catch (e_9_1) { e_9 = { error: e_9_1 }; }\n                    finally {\n                        try {\n                            if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);\n                        }\n                        finally { if (e_9) throw e_9.error; }\n                    }\n                    // Paramater-inlining HF file (e.g. istanbul.json)\n                }\n                else {\n                    if (!hfChanges[1][topic]) {\n                        throw new Error(\"Topic \" + topic + \" not defined\");\n                    }\n                    if (hfChanges[1][topic][name] !== undefined) {\n                        value = hfChanges[1][topic][name].v;\n                    }\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);\n            }\n            finally { if (e_8) throw e_8.error; }\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.paramByEIP = function (topic, name, eip) {\n        if (!(eip in eips_1.EIPs)) {\n            throw new Error(eip + \" not supported\");\n        }\n        var eipParams = eips_1.EIPs[eip];\n        if (!(topic in eipParams)) {\n            throw new Error(\"Topic \" + topic + \" not defined\");\n        }\n        if (eipParams[topic][name] === undefined) {\n            return null;\n        }\n        var value = eipParams[topic][name].v;\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.paramByHardfork(topic, name, hardfork);\n    };\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    Common.prototype.isActivatedEIP = function (eip) {\n        var e_10, _a;\n        if (this.eips().includes(eip)) {\n            return true;\n        }\n        try {\n            for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {\n                var hfChanges = HARDFORK_CHANGES_3_1.value;\n                var hf = hfChanges[1];\n                if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                    if (hf['eips'].includes(eip)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        catch (e_10_1) { e_10 = { error: e_10_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);\n            }\n            finally { if (e_10) throw e_10.error; }\n        }\n        return false;\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlockBN(hardfork);\n        if (hfBlock && blockNumber.gte(hfBlock)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        var e_11, _a;\n        if (opts === void 0) { opts = {}; }\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        try {\n            for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {\n                var hf = hardforks_2_1.value;\n                if (hf['name'] === hardfork1)\n                    posHf1 = index;\n                if (hf['name'] === hardfork2)\n                    posHf2 = index;\n                index += 1;\n            }\n        }\n        catch (e_11_1) { e_11 = { error: e_11_1 }; }\n        finally {\n            try {\n                if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);\n            }\n            finally { if (e_11) throw e_11.error; }\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        var e_12, _a;\n        var _b;\n        if (opts === void 0) { opts = {}; }\n        var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        try {\n            for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var hf = _d.value;\n                if (hf['name'] === hardfork && hf['block'] !== null)\n                    return true;\n            }\n        }\n        catch (e_12_1) { e_12 = { error: e_12_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_12) throw e_12.error; }\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        var e_13, _a;\n        if (opts === void 0) { opts = {}; }\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        try {\n            for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {\n                var hf = hfs_2_1.value;\n                if (hf['block'] === null)\n                    continue;\n                if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                    break;\n                if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                    continue;\n                activeHardforks.push(hf);\n            }\n        }\n        catch (e_13_1) { e_13 = { error: e_13_1 }; }\n        finally {\n            try {\n                if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);\n            }\n            finally { if (e_13) throw e_13.error; }\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        if (opts === void 0) { opts = {}; }\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number\n     * @deprecated Please use hardforkBlockBN() for large number support\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        return ethereumjs_util_1.toType(this.hardforkBlockBN(hardfork), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number\n     */\n    Common.prototype.hardforkBlockBN = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        return new ethereumjs_util_1.BN(this._getHardfork(hardfork)['block']);\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        hardfork = this._chooseHardfork(hardfork, false);\n        return this.hardforkBlockBN(hardfork).eq(blockNumber);\n    };\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated Please use nextHardforkBlockBN() for large number support\n     */\n    Common.prototype.nextHardforkBlock = function (hardfork) {\n        var block = this.nextHardforkBlockBN(hardfork);\n        return block === null ? null : ethereumjs_util_1.toType(block, ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     */\n    Common.prototype.nextHardforkBlockBN = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var hfBlock = this.hardforkBlockBN(hardfork);\n        // Next fork block number or null if none available\n        // Logic: if accumulator is still null and on the first occurence of\n        // a block greater than the current hfBlock set the accumulator,\n        // pass on the accumulator as the final result from this time on\n        var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n            var block = new ethereumjs_util_1.BN(hf.block);\n            return block.gt(hfBlock) && acc === null ? block : acc;\n        }, null);\n        return nextHfBlock;\n    };\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {\n        blockNumber = ethereumjs_util_1.toType(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        hardfork = this._chooseHardfork(hardfork, false);\n        var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);\n        return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);\n    };\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @returns Fork hash as hex string\n     */\n    Common.prototype._calcForkHash = function (hardfork) {\n        var e_14, _a;\n        var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');\n        var hfBuffer = Buffer.alloc(0);\n        var prevBlock = 0;\n        try {\n            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var hf = _c.value;\n                var block = hf.block;\n                // Skip for chainstart (0), not applied HFs (null) and\n                // when already applied on same block number HFs\n                if (block !== 0 && block !== null && block !== prevBlock) {\n                    var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');\n                    hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n                }\n                if (hf.name === hardfork)\n                    break;\n                prevBlock = block;\n            }\n        }\n        catch (e_14_1) { e_14 = { error: e_14_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_14) throw e_14.error; }\n        }\n        var inputBuffer = Buffer.concat([genesis, hfBuffer]);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        var forkhash = ethereumjs_util_1.intToBuffer(crc_32_1.buf(inputBuffer) >>> 0).toString('hex');\n        return \"0x\" + forkhash;\n    };\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     */\n    Common.prototype.forkHash = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var data = this._getHardfork(hardfork);\n        if (data['block'] === null) {\n            var msg = 'No fork hash calculation possible for non-applied or future hardfork';\n            throw new Error(msg);\n        }\n        if (data['forkHash'] !== undefined) {\n            return data['forkHash'];\n        }\n        return this._calcForkHash(hardfork);\n    };\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    Common.prototype.hardforkForForkHash = function (forkHash) {\n        var resArray = this.hardforks().filter(function (hf) {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    };\n    /**\n     * Returns the Genesis parameters of current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    Common.prototype.dnsNetworks = function () {\n        return this._chainParams['dnsNetworks'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     * @deprecated Please use chainIdBN() for large number support\n     */\n    Common.prototype.chainId = function () {\n        return ethereumjs_util_1.toType(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainIdBN = function () {\n        return new ethereumjs_util_1.BN(this._chainParams['chainId']);\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     * @deprecated Please use networkIdBN() for large number support\n     */\n    Common.prototype.networkId = function () {\n        return ethereumjs_util_1.toType(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkIdBN = function () {\n        return new ethereumjs_util_1.BN(this._chainParams['networkId']);\n    };\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */\n    Common.prototype.eips = function () {\n        return this._eips;\n    };\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"\n     */\n    Common.prototype.consensusType = function () {\n        return this._chainParams['consensus']['type'];\n    };\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type or\n     * \"clique\" for \"poa\" consensus type\n     */\n    Common.prototype.consensusAlgorithm = function () {\n        return this._chainParams['consensus']['algorithm'];\n    };\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: -\n     * clique: period, epoch\n     * aura: -\n     */\n    Common.prototype.consensusConfig = function () {\n        return this._chainParams['consensus'][this.consensusAlgorithm()];\n    };\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    Common.prototype.copy = function () {\n        return Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    };\n    return Common;\n}(events_1.EventEmitter));\nexports.default = Common;\n"]},"metadata":{},"sourceType":"script"}