{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  var arrayValues = null;\n\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    var unique = {};\n    arrayValues = coders.map(function (coder) {\n      var name = coder.localName;\n\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  var staticWriter = new Writer(writer.wordSize);\n  var dynamicWriter = new Writer(writer.wordSize);\n  var updateFuncs = [];\n  coders.forEach(function (coder, index) {\n    var value = arrayValues[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      var dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      var updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(function (baseOffset) {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(function (func) {\n    func(staticWriter.length);\n  });\n  var length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  var values = []; // A reader anchored to this base\n\n  var baseReader = reader.subReader(0);\n  coders.forEach(function (coder) {\n    var value = null;\n\n    if (coder.dynamic) {\n      var offset = reader.readValue();\n      var offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // We only output named properties for uniquely named coders\n\n  var uniqueNames = coders.reduce(function (accum, coder) {\n    var name = coder.localName;\n\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n\n      accum[name]++;\n    }\n\n    return accum;\n  }, {}); // Add any named parameters (i.e. tuples)\n\n  coders.forEach(function (coder, index) {\n    var name = coder.localName;\n\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    var value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        get: function get() {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  var _loop = function _loop(i) {\n    var value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        get: function get() {\n          throw value;\n        }\n      });\n    }\n  };\n\n  for (var i = 0; i < values.length; i++) {\n    _loop(i);\n  }\n\n  return Object.freeze(values);\n}\nexport var ArrayCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(ArrayCoder, _Coder);\n\n  var _super = _createSuper(ArrayCoder);\n\n  function ArrayCoder(coder, length, localName) {\n    var _this;\n\n    _classCallCheck(this, ArrayCoder);\n\n    var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    var dynamic = length === -1 || coder.dynamic;\n    _this = _super.call(this, \"array\", type, localName, dynamic);\n    _this.coder = coder;\n    _this.length = length;\n    return _this;\n  }\n\n  _createClass(ArrayCoder, [{\n    key: \"encode\",\n    value: function encode(writer, value) {\n      if (!Array.isArray(value)) {\n        this._throwError(\"expected array value\", value);\n      }\n\n      var count = this.length;\n\n      if (count === -1) {\n        count = value.length;\n        writer.writeValue(value.length);\n      }\n\n      logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n      var coders = [];\n\n      for (var i = 0; i < value.length; i++) {\n        coders.push(this.coder);\n      }\n\n      return pack(writer, coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var count = this.length;\n\n      if (count === -1) {\n        count = reader.readValue().toNumber();\n      }\n\n      var coders = [];\n\n      for (var i = 0; i < count; i++) {\n        coders.push(new AnonymousCoder(this.coder));\n      }\n\n      return reader.coerce(this.name, unpack(reader, coders));\n    }\n  }]);\n\n  return ArrayCoder;\n}(Coder);","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethersproject/abi/lib.esm/coders/array.js"],"names":["Logger","version","logger","Coder","Writer","AnonymousCoder","pack","writer","coders","values","arrayValues","Array","isArray","unique","map","coder","name","localName","throwError","errors","INVALID_ARGUMENT","argument","value","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","forEach","index","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","reader","baseReader","subReader","offset","readValue","offsetReader","toNumber","decode","error","code","BUFFER_OVERRUN","baseType","type","undefined","uniqueNames","reduce","accum","Error","Object","defineProperty","get","i","freeze","ArrayCoder","_throwError","count","writeValue","checkArgumentCount","coerce"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}