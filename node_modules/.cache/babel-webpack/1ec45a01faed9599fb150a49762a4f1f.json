{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n\nvar FeeMarketEIP1559Transaction = function (_super) {\n  __extends(FeeMarketEIP1559Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function FeeMarketEIP1559Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a, _b;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n\n    _this.DEFAULT_HARDFORK = 'london';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        maxFeePerGas = txData.maxFeePerGas,\n        maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN();\n\n    if (!_this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.maxFeePerGas = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n\n    _this._validateCannotExceedMaxInteger({\n      maxFeePerGas: _this.maxFeePerGas,\n      maxPriorityFeePerGas: _this.maxPriorityFeePerGas\n    }, 256);\n\n    if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n      throw new Error('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n    }\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      throw new Error('The y-parity of the transaction should either be 0 or 1');\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function get() {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function get() {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function get() {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n  FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n\n\n  FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized.slice(0, 1).toString('hex'));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n\n\n  FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n\n\n  FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n\n    var _a = __read(values, 12),\n        chainId = _a[0],\n        nonce = _a[1],\n        maxPriorityFeePerGas = _a[2],\n        maxFeePerGas = _a[3],\n        gasLimit = _a[4],\n        to = _a[5],\n        value = _a[6],\n        data = _a[7],\n        accessList = _a[8],\n        v = _a[9],\n        r = _a[10],\n        s = _a[11];\n\n    return new FeeMarketEIP1559Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      maxPriorityFeePerGas: maxPriorityFeePerGas,\n      maxFeePerGas: maxFeePerGas,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n    if (baseFee === void 0) {\n      baseFee = new ethereumjs_util_1.BN(0);\n    }\n\n    var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n    var gasPrice = inclusionFeePerGas.add(baseFee);\n    return this.gasLimit.mul(gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId), ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.maxPriorityFeePerGas), ethereumjs_util_1.bnToUnpaddedBuffer(this.maxFeePerGas), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.accessList, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceeding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n\n  FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 9);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return ethereumjs_util_1.keccak256(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call hash method if transaction is not signed');\n    }\n\n    return ethereumjs_util_1.keccak256(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw new Error('Cannot call this method if transaction is not signed');\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign\n      ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n\n  FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: ethereumjs_util_1.bnToHex(this.chainId),\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      maxPriorityFeePerGas: ethereumjs_util_1.bnToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: ethereumjs_util_1.bnToHex(this.maxFeePerGas),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = FeeMarketEIP1559Transaction;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","defineProperty","exports","ethereumjs_util_1","require","baseTransaction_1","types_1","util_1","TRANSACTION_TYPE","TRANSACTION_TYPE_BUFFER","Buffer","from","toString","padStart","FeeMarketEIP1559Transaction","_super","txData","opts","_a","_b","_this","type","DEFAULT_HARDFORK","chainId","accessList","maxFeePerGas","maxPriorityFeePerGas","common","_getCommon","chainIdBN","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessLists","getAccessListData","AccessListJSON","verifyAccessList","BN","toBuffer","_validateCannotExceedMaxInteger","lt","v","eqn","gteHardfork","gt","N_DIV_2","freeze","get","enumerable","configurable","fromTxData","fromSerializedTx","serialized","slice","equals","values","rlp","decode","isArray","fromValuesArray","fromRlpSerializedTx","nonce","gasLimit","to","data","undefined","getDataFee","cost","iaddn","getDataFeeEIP2930","getUpfrontCost","baseFee","inclusionFeePerGas","min","sub","gasPrice","add","mul","raw","bnToUnpaddedBuffer","buf","serialize","base","encode","getMessageToSign","hashMessage","message","keccak256","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","ecrecover","addn","_processSignature","toJSON","accessListJSON","getAccessListJSON","bnToHex","BaseTransaction","default"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,cAAa,GAAG,uBAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,cAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd;AAAiB,YAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAA1C;AAAwD,KAF9E;;AAGA,WAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGV,MAAM,CAACW,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAIV,CAAT,IAAcS,CAAd;AAAiB,YAAIb,MAAM,CAACQ,SAAP,CAAiBH,cAAjB,CAAgCa,IAAhC,CAAqCL,CAArC,EAAwCT,CAAxC,CAAJ,EACbQ,CAAC,CAACR,CAAD,CAAD,GAAOS,CAAC,CAACT,CAAD,CAAR;AADJ;AAEH;;AACD,WAAOQ,CAAP;AACH,GAPD;;AAQA,SAAOF,QAAQ,CAACS,KAAT,CAAe,IAAf,EAAqBH,SAArB,CAAP;AACH,CAVD;;AAWA,IAAII,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaN,CAAb,EAAgB;AAClD,MAAIO,CAAC,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAzC;AACA,MAAI,CAACF,CAAL,EAAQ,OAAOD,CAAP;AACR,MAAIP,CAAC,GAAGQ,CAAC,CAACJ,IAAF,CAAOG,CAAP,CAAR;AAAA,MAAmBI,CAAnB;AAAA,MAAsBC,EAAE,GAAG,EAA3B;AAAA,MAA+BC,CAA/B;;AACA,MAAI;AACA,WAAO,CAACZ,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACU,CAAC,GAAGX,CAAC,CAACc,IAAF,EAAL,EAAeC,IAApD;AAA0DH,MAAAA,EAAE,CAACI,IAAH,CAAQL,CAAC,CAACM,KAAV;AAA1D;AACH,GAFD,CAGA,OAAOC,KAAP,EAAc;AAAEL,IAAAA,CAAC,GAAG;AAAEK,MAAAA,KAAK,EAAEA;AAAT,KAAJ;AAAuB,GAHvC,SAIQ;AACJ,QAAI;AACA,UAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAR,KAAiBP,CAAC,GAAGR,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCQ,CAAC,CAACJ,IAAF,CAAOJ,CAAP;AAC1C,KAFD,SAGQ;AAAE,UAAIa,CAAJ,EAAO,MAAMA,CAAC,CAACK,KAAR;AAAgB;AACpC;;AACD,SAAON,EAAP;AACH,CAfD;;AAgBA1B,MAAM,CAACiC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEH,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAII,iBAAiB,GAAGC,OAAO,CAAC,iBAAD,CAA/B;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAApB;;AACA,IAAII,gBAAgB,GAAG,CAAvB;AACA,IAAIC,uBAAuB,GAAGC,MAAM,CAACC,IAAP,CAAYH,gBAAgB,CAACI,QAAjB,CAA0B,EAA1B,EAA8BC,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,CAAZ,EAA4D,KAA5D,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,2BAA2B,GAAkB,UAAUC,MAAV,EAAkB;AAC/DnD,EAAAA,SAAS,CAACkD,2BAAD,EAA8BC,MAA9B,CAAT;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASD,2BAAT,CAAqCE,MAArC,EAA6CC,IAA7C,EAAmD;AAC/C,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,QAAIC,EAAJ,EAAQC,EAAR;;AACA,QAAIC,KAAK,GAAGL,MAAM,CAAC7B,IAAP,CAAY,IAAZ,EAAkBR,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsC,MAAL,CAAT,EAAuB;AAAEK,MAAAA,IAAI,EAAEb;AAAR,KAAvB,CAA1B,KAAiF,IAA7F;AACA;AACR;AACA;AACA;AACA;AACA;;;AACQY,IAAAA,KAAK,CAACE,gBAAN,GAAyB,QAAzB;AACA,QAAIC,OAAO,GAAGP,MAAM,CAACO,OAArB;AAAA,QAA8BC,UAAU,GAAGR,MAAM,CAACQ,UAAlD;AAAA,QAA8DC,YAAY,GAAGT,MAAM,CAACS,YAApF;AAAA,QAAkGC,oBAAoB,GAAGV,MAAM,CAACU,oBAAhI;AACAN,IAAAA,KAAK,CAACO,MAAN,GAAeP,KAAK,CAACQ,UAAN,CAAiBX,IAAI,CAACU,MAAtB,EAA8BJ,OAA9B,CAAf;AACAH,IAAAA,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACO,MAAN,CAAaE,SAAb,EAAhB;;AACA,QAAI,CAACT,KAAK,CAACO,MAAN,CAAaG,cAAb,CAA4B,IAA5B,CAAL,EAAwC;AACpC,YAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACH;;AACDX,IAAAA,KAAK,CAACY,kBAAN,GAA2BZ,KAAK,CAACY,kBAAN,CAAyBC,MAAzB,CAAgC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAhC,CAA3B,CAjB+C,CAkB/C;;AACA,QAAIC,cAAc,GAAG3B,MAAM,CAAC4B,WAAP,CAAmBC,iBAAnB,CAAqCZ,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4D,EAAjG,CAArB;AACAJ,IAAAA,KAAK,CAACI,UAAN,GAAmBU,cAAc,CAACV,UAAlC;AACAJ,IAAAA,KAAK,CAACiB,cAAN,GAAuBH,cAAc,CAACG,cAAtC,CArB+C,CAsB/C;;AACA9B,IAAAA,MAAM,CAAC4B,WAAP,CAAmBG,gBAAnB,CAAoClB,KAAK,CAACI,UAA1C;AACAJ,IAAAA,KAAK,CAACK,YAAN,GAAqB,IAAItB,iBAAiB,CAACoC,EAAtB,CAAyBpC,iBAAiB,CAACqC,QAAlB,CAA2Bf,YAAY,KAAK,EAAjB,GAAsB,IAAtB,GAA6BA,YAAxD,CAAzB,CAArB;AACAL,IAAAA,KAAK,CAACM,oBAAN,GAA6B,IAAIvB,iBAAiB,CAACoC,EAAtB,CAAyBpC,iBAAiB,CAACqC,QAAlB,CAA2Bd,oBAAoB,KAAK,EAAzB,GAA8B,IAA9B,GAAqCA,oBAAhE,CAAzB,CAA7B;;AACAN,IAAAA,KAAK,CAACqB,+BAAN,CAAsC;AAClChB,MAAAA,YAAY,EAAEL,KAAK,CAACK,YADc;AAElCC,MAAAA,oBAAoB,EAAEN,KAAK,CAACM;AAFM,KAAtC,EAGG,GAHH;;AAIA,QAAIN,KAAK,CAACK,YAAN,CAAmBiB,EAAnB,CAAsBtB,KAAK,CAACM,oBAA5B,CAAJ,EAAuD;AACnD,YAAM,IAAIK,KAAJ,CAAU,iGAAV,CAAN;AACH;;AACD,QAAIX,KAAK,CAACuB,CAAN,IAAW,CAACvB,KAAK,CAACuB,CAAN,CAAQC,GAAR,CAAY,CAAZ,CAAZ,IAA8B,CAACxB,KAAK,CAACuB,CAAN,CAAQC,GAAR,CAAY,CAAZ,CAAnC,EAAmD;AAC/C,YAAM,IAAIb,KAAJ,CAAU,yDAAV,CAAN;AACH;;AACD,QAAIX,KAAK,CAACO,MAAN,CAAakB,WAAb,CAAyB,WAAzB,MAA0C,CAAC3B,EAAE,GAAGE,KAAK,CAACvC,CAAZ,MAAmB,IAAnB,IAA2BqC,EAAE,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,EAAE,CAAC4B,EAAH,CAAMxC,OAAO,CAACyC,OAAd,CAA9F,CAAJ,EAA2H;AACvH,YAAM,IAAIhB,KAAJ,CAAU,8EAAV,CAAN;AACH;;AACD,QAAIiB,MAAM,GAAG,CAAC7B,EAAE,GAAGF,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAAC+B,MAAvD,MAAmE,IAAnE,IAA2E7B,EAAE,KAAK,KAAK,CAAvF,GAA2FA,EAA3F,GAAgG,IAA7G;;AACA,QAAI6B,MAAJ,EAAY;AACRhF,MAAAA,MAAM,CAACgF,MAAP,CAAc5B,KAAd;AACH;;AACD,WAAOA,KAAP;AACH;;AACDpD,EAAAA,MAAM,CAACiC,cAAP,CAAsBa,2BAA2B,CAACtC,SAAlD,EAA6D,SAA7D,EAAwE;AACpE;AACR;AACA;AACA;AACA;AACQyE,IAAAA,GAAG,EAAE,eAAY;AACb,aAAO,KAAKxD,CAAZ;AACH,KARmE;AASpEyD,IAAAA,UAAU,EAAE,KATwD;AAUpEC,IAAAA,YAAY,EAAE;AAVsD,GAAxE;AAYAnF,EAAAA,MAAM,CAACiC,cAAP,CAAsBa,2BAA2B,CAACtC,SAAlD,EAA6D,SAA7D,EAAwE;AACpE;AACR;AACA;AACA;AACA;AACQyE,IAAAA,GAAG,EAAE,eAAY;AACb,aAAO,KAAKpE,CAAZ;AACH,KARmE;AASpEqE,IAAAA,UAAU,EAAE,KATwD;AAUpEC,IAAAA,YAAY,EAAE;AAVsD,GAAxE;AAYAnF,EAAAA,MAAM,CAACiC,cAAP,CAAsBa,2BAA2B,CAACtC,SAAlD,EAA6D,SAA7D,EAAwE;AACpE;AACR;AACA;AACA;AACA;AACQyE,IAAAA,GAAG,EAAE,eAAY;AACb,aAAO,KAAKN,CAAZ;AACH,KARmE;AASpEO,IAAAA,UAAU,EAAE,KATwD;AAUpEC,IAAAA,YAAY,EAAE;AAVsD,GAAxE;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIrC,EAAAA,2BAA2B,CAACsC,UAA5B,GAAyC,UAAUpC,MAAV,EAAkBC,IAAlB,EAAwB;AAC7D,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,WAAO,IAAIH,2BAAJ,CAAgCE,MAAhC,EAAwCC,IAAxC,CAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,2BAA2B,CAACuC,gBAA5B,GAA+C,UAAUC,UAAV,EAAsBrC,IAAtB,EAA4B;AACvE,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,QAAI,CAACqC,UAAU,CAACC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,EAAuBC,MAAvB,CAA8B/C,uBAA9B,CAAL,EAA6D;AACzD,YAAM,IAAIsB,KAAJ,CAAU,wFAAwFvB,gBAAxF,GAA2G,cAA3G,GAA4H8C,UAAU,CACjJC,KADuI,CACjI,CADiI,EAC9H,CAD8H,EAEvI3C,QAFuI,CAE9H,KAF8H,CAAtI,CAAN;AAGH;;AACD,QAAI6C,MAAM,GAAGtD,iBAAiB,CAACuD,GAAlB,CAAsBC,MAAtB,CAA6BL,UAAU,CAACC,KAAX,CAAiB,CAAjB,CAA7B,CAAb;;AACA,QAAI,CAACpF,KAAK,CAACyF,OAAN,CAAcH,MAAd,CAAL,EAA4B;AACxB,YAAM,IAAI1B,KAAJ,CAAU,4CAAV,CAAN;AACH;;AACD,WAAOjB,2BAA2B,CAAC+C,eAA5B,CAA4CJ,MAA5C,EAAoDxC,IAApD,CAAP;AACH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,2BAA2B,CAACgD,mBAA5B,GAAkD,UAAUR,UAAV,EAAsBrC,IAAtB,EAA4B;AAC1E,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,WAAOH,2BAA2B,CAACuC,gBAA5B,CAA6CC,UAA7C,EAAyDrC,IAAzD,CAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,2BAA2B,CAAC+C,eAA5B,GAA8C,UAAUJ,MAAV,EAAkBxC,IAAlB,EAAwB;AAClE,QAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,QAAIwC,MAAM,CAACxE,MAAP,KAAkB,CAAlB,IAAuBwE,MAAM,CAACxE,MAAP,KAAkB,EAA7C,EAAiD;AAC7C,YAAM,IAAI8C,KAAJ,CAAU,uGAAV,CAAN;AACH;;AACD,QAAIb,EAAE,GAAG9B,MAAM,CAACqE,MAAD,EAAS,EAAT,CAAf;AAAA,QAA6BlC,OAAO,GAAGL,EAAE,CAAC,CAAD,CAAzC;AAAA,QAA8C6C,KAAK,GAAG7C,EAAE,CAAC,CAAD,CAAxD;AAAA,QAA6DQ,oBAAoB,GAAGR,EAAE,CAAC,CAAD,CAAtF;AAAA,QAA2FO,YAAY,GAAGP,EAAE,CAAC,CAAD,CAA5G;AAAA,QAAiH8C,QAAQ,GAAG9C,EAAE,CAAC,CAAD,CAA9H;AAAA,QAAmI+C,EAAE,GAAG/C,EAAE,CAAC,CAAD,CAA1I;AAAA,QAA+InB,KAAK,GAAGmB,EAAE,CAAC,CAAD,CAAzJ;AAAA,QAA8JgD,IAAI,GAAGhD,EAAE,CAAC,CAAD,CAAvK;AAAA,QAA4KM,UAAU,GAAGN,EAAE,CAAC,CAAD,CAA3L;AAAA,QAAgMyB,CAAC,GAAGzB,EAAE,CAAC,CAAD,CAAtM;AAAA,QAA2MzB,CAAC,GAAGyB,EAAE,CAAC,EAAD,CAAjN;AAAA,QAAuNrC,CAAC,GAAGqC,EAAE,CAAC,EAAD,CAA7N;;AACA,WAAO,IAAIJ,2BAAJ,CAAgC;AACnCS,MAAAA,OAAO,EAAE,IAAIpB,iBAAiB,CAACoC,EAAtB,CAAyBhB,OAAzB,CAD0B;AAEnCwC,MAAAA,KAAK,EAAEA,KAF4B;AAGnCrC,MAAAA,oBAAoB,EAAEA,oBAHa;AAInCD,MAAAA,YAAY,EAAEA,YAJqB;AAKnCuC,MAAAA,QAAQ,EAAEA,QALyB;AAMnCC,MAAAA,EAAE,EAAEA,EAN+B;AAOnClE,MAAAA,KAAK,EAAEA,KAP4B;AAQnCmE,MAAAA,IAAI,EAAEA,IAR6B;AASnC1C,MAAAA,UAAU,EAAEA,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4D,EATrC;AAUnCmB,MAAAA,CAAC,EAAEA,CAAC,KAAKwB,SAAN,GAAkB,IAAIhE,iBAAiB,CAACoC,EAAtB,CAAyBI,CAAzB,CAAlB,GAAgDwB,SAVhB;AAWnC1E,MAAAA,CAAC,EAAEA,CAXgC;AAYnCZ,MAAAA,CAAC,EAAEA;AAZgC,KAAhC,EAaJoC,IAbI,CAAP;AAcH,GApBD;AAqBA;AACJ;AACA;;;AACIH,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsC4F,UAAtC,GAAmD,YAAY;AAC3D,QAAIC,IAAI,GAAGtD,MAAM,CAACvC,SAAP,CAAiB4F,UAAjB,CAA4BlF,IAA5B,CAAiC,IAAjC,CAAX;;AACAmF,IAAAA,IAAI,CAACC,KAAL,CAAW/D,MAAM,CAAC4B,WAAP,CAAmBoC,iBAAnB,CAAqC,KAAK/C,UAA1C,EAAsD,KAAKG,MAA3D,CAAX;AACA,WAAO0C,IAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;;;AACIvD,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsCgG,cAAtC,GAAuD,UAAUC,OAAV,EAAmB;AACtE,QAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,IAAItE,iBAAiB,CAACoC,EAAtB,CAAyB,CAAzB,CAAV;AAAwC;;AAClE,QAAImC,kBAAkB,GAAGvE,iBAAiB,CAACoC,EAAlB,CAAqBoC,GAArB,CAAyB,KAAKjD,oBAA9B,EAAoD,KAAKD,YAAL,CAAkBmD,GAAlB,CAAsBH,OAAtB,CAApD,CAAzB;AACA,QAAII,QAAQ,GAAGH,kBAAkB,CAACI,GAAnB,CAAuBL,OAAvB,CAAf;AACA,WAAO,KAAKT,QAAL,CAAce,GAAd,CAAkBF,QAAlB,EAA4BC,GAA5B,CAAgC,KAAK/E,KAArC,CAAP;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIe,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsCwG,GAAtC,GAA4C,YAAY;AACpD,WAAO,CACH7E,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAK1D,OAA1C,CADG,EAEHpB,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKlB,KAA1C,CAFG,EAGH5D,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKvD,oBAA1C,CAHG,EAIHvB,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKxD,YAA1C,CAJG,EAKHtB,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKjB,QAA1C,CALG,EAMH,KAAKC,EAAL,KAAYE,SAAZ,GAAwB,KAAKF,EAAL,CAAQiB,GAAhC,GAAsCxE,MAAM,CAACC,IAAP,CAAY,EAAZ,CANnC,EAOHR,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKlF,KAA1C,CAPG,EAQH,KAAKmE,IARF,EASH,KAAK1C,UATF,EAUH,KAAKmB,CAAL,KAAWwB,SAAX,GAAuBhE,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKtC,CAA1C,CAAvB,GAAsEjC,MAAM,CAACC,IAAP,CAAY,EAAZ,CAVnE,EAWH,KAAKlB,CAAL,KAAW0E,SAAX,GAAuBhE,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKxF,CAA1C,CAAvB,GAAsEiB,MAAM,CAACC,IAAP,CAAY,EAAZ,CAXnE,EAYH,KAAK9B,CAAL,KAAWsF,SAAX,GAAuBhE,iBAAiB,CAAC8E,kBAAlB,CAAqC,KAAKpG,CAA1C,CAAvB,GAAsE6B,MAAM,CAACC,IAAP,CAAY,EAAZ,CAZnE,CAAP;AAcH,GAfD;AAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsC2G,SAAtC,GAAkD,YAAY;AAC1D,QAAIC,IAAI,GAAG,KAAKJ,GAAL,EAAX;AACA,WAAOtE,MAAM,CAACuB,MAAP,CAAc,CAACxB,uBAAD,EAA0BN,iBAAiB,CAACuD,GAAlB,CAAsB2B,MAAtB,CAA6BD,IAA7B,CAA1B,CAAd,CAAP;AACH,GAHD;;AAIAtE,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsC8G,gBAAtC,GAAyD,UAAUC,WAAV,EAAuB;AAC5E,QAAIA,WAAW,KAAK,KAAK,CAAzB,EAA4B;AAAEA,MAAAA,WAAW,GAAG,IAAd;AAAqB;;AACnD,QAAIH,IAAI,GAAG,KAAKJ,GAAL,GAAWzB,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAX;AACA,QAAIiC,OAAO,GAAG9E,MAAM,CAACuB,MAAP,CAAc,CAACxB,uBAAD,EAA0BN,iBAAiB,CAACuD,GAAlB,CAAsB2B,MAAtB,CAA6BD,IAA7B,CAA1B,CAAd,CAAd;;AACA,QAAIG,WAAJ,EAAiB;AACb,aAAOpF,iBAAiB,CAACsF,SAAlB,CAA4BD,OAA5B,CAAP;AACH,KAFD,MAGK;AACD,aAAOA,OAAP;AACH;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;;;AACI1E,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsCkH,IAAtC,GAA6C,YAAY;AACrD,QAAI,CAAC,KAAKC,QAAL,EAAL,EAAsB;AAClB,YAAM,IAAI5D,KAAJ,CAAU,sDAAV,CAAN;AACH;;AACD,WAAO5B,iBAAiB,CAACsF,SAAlB,CAA4B,KAAKN,SAAL,EAA5B,CAAP;AACH,GALD;AAMA;AACJ;AACA;;;AACIrE,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsCoH,2BAAtC,GAAoE,YAAY;AAC5E,WAAO,KAAKN,gBAAL,EAAP;AACH,GAFD;AAGA;AACJ;AACA;;;AACIxE,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsCqH,kBAAtC,GAA2D,YAAY;AACnE,QAAI3E,EAAJ;;AACA,QAAI,CAAC,KAAKyE,QAAL,EAAL,EAAsB;AAClB,YAAM,IAAI5D,KAAJ,CAAU,sDAAV,CAAN;AACH;;AACD,QAAI+D,OAAO,GAAG,KAAKF,2BAAL,EAAd,CALmE,CAMnE;AACA;;AACA,QAAI,KAAKjE,MAAL,CAAYkB,WAAZ,CAAwB,WAAxB,MAAyC,CAAC3B,EAAE,GAAG,KAAKrC,CAAX,MAAkB,IAAlB,IAA0BqC,EAAE,KAAK,KAAK,CAAtC,GAA0C,KAAK,CAA/C,GAAmDA,EAAE,CAAC4B,EAAH,CAAMxC,OAAO,CAACyC,OAAd,CAA5F,CAAJ,EAAyH;AACrH,YAAM,IAAIhB,KAAJ,CAAU,8EAAV,CAAN;AACH;;AACD,QAAIZ,EAAE,GAAG,IAAT;AAAA,QAAewB,CAAC,GAAGxB,EAAE,CAACwB,CAAtB;AAAA,QAAyBlD,CAAC,GAAG0B,EAAE,CAAC1B,CAAhC;AAAA,QAAmCZ,CAAC,GAAGsC,EAAE,CAACtC,CAA1C;;AACA,QAAI;AACA,aAAOsB,iBAAiB,CAAC4F,SAAlB,CAA4BD,OAA5B,EAAqCnD,CAAC,CAACqD,IAAF,CAAO,EAAP,CAArC,EAAiD;AACxD7F,MAAAA,iBAAiB,CAAC8E,kBAAlB,CAAqCxF,CAArC,CADO,EACkCU,iBAAiB,CAAC8E,kBAAlB,CAAqCpG,CAArC,CADlC,CAAP;AAEH,KAHD,CAIA,OAAOc,CAAP,EAAU;AACN,YAAM,IAAIoC,KAAJ,CAAU,mBAAV,CAAN;AACH;AACJ,GAnBD;;AAoBAjB,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsCyH,iBAAtC,GAA0D,UAAUtD,CAAV,EAAalD,CAAb,EAAgBZ,CAAhB,EAAmB;AACzE,QAAIoC,IAAI,GAAG;AACPU,MAAAA,MAAM,EAAE,KAAKA;AADN,KAAX;AAGA,WAAOb,2BAA2B,CAACsC,UAA5B,CAAuC;AAC1C7B,MAAAA,OAAO,EAAE,KAAKA,OAD4B;AAE1CwC,MAAAA,KAAK,EAAE,KAAKA,KAF8B;AAG1CrC,MAAAA,oBAAoB,EAAE,KAAKA,oBAHe;AAI1CD,MAAAA,YAAY,EAAE,KAAKA,YAJuB;AAK1CuC,MAAAA,QAAQ,EAAE,KAAKA,QAL2B;AAM1CC,MAAAA,EAAE,EAAE,KAAKA,EANiC;AAO1ClE,MAAAA,KAAK,EAAE,KAAKA,KAP8B;AAQ1CmE,MAAAA,IAAI,EAAE,KAAKA,IAR+B;AAS1C1C,MAAAA,UAAU,EAAE,KAAKA,UATyB;AAU1CmB,MAAAA,CAAC,EAAE,IAAIxC,iBAAiB,CAACoC,EAAtB,CAAyBI,CAAC,GAAG,EAA7B,CAVuC;AAW1ClD,MAAAA,CAAC,EAAE,IAAIU,iBAAiB,CAACoC,EAAtB,CAAyB9C,CAAzB,CAXuC;AAY1CZ,MAAAA,CAAC,EAAE,IAAIsB,iBAAiB,CAACoC,EAAtB,CAAyB1D,CAAzB;AAZuC,KAAvC,EAaJoC,IAbI,CAAP;AAcH,GAlBD;AAmBA;AACJ;AACA;;;AACIH,EAAAA,2BAA2B,CAACtC,SAA5B,CAAsC0H,MAAtC,GAA+C,YAAY;AACvD,QAAIC,cAAc,GAAG5F,MAAM,CAAC4B,WAAP,CAAmBiE,iBAAnB,CAAqC,KAAK5E,UAA1C,CAArB;AACA,WAAO;AACHD,MAAAA,OAAO,EAAEpB,iBAAiB,CAACkG,OAAlB,CAA0B,KAAK9E,OAA/B,CADN;AAEHwC,MAAAA,KAAK,EAAE5D,iBAAiB,CAACkG,OAAlB,CAA0B,KAAKtC,KAA/B,CAFJ;AAGHrC,MAAAA,oBAAoB,EAAEvB,iBAAiB,CAACkG,OAAlB,CAA0B,KAAK3E,oBAA/B,CAHnB;AAIHD,MAAAA,YAAY,EAAEtB,iBAAiB,CAACkG,OAAlB,CAA0B,KAAK5E,YAA/B,CAJX;AAKHuC,MAAAA,QAAQ,EAAE7D,iBAAiB,CAACkG,OAAlB,CAA0B,KAAKrC,QAA/B,CALP;AAMHC,MAAAA,EAAE,EAAE,KAAKA,EAAL,KAAYE,SAAZ,GAAwB,KAAKF,EAAL,CAAQrD,QAAR,EAAxB,GAA6CuD,SAN9C;AAOHpE,MAAAA,KAAK,EAAEI,iBAAiB,CAACkG,OAAlB,CAA0B,KAAKtG,KAA/B,CAPJ;AAQHmE,MAAAA,IAAI,EAAE,OAAO,KAAKA,IAAL,CAAUtD,QAAV,CAAmB,KAAnB,CARV;AASHY,MAAAA,UAAU,EAAE2E,cATT;AAUHxD,MAAAA,CAAC,EAAE,KAAKA,CAAL,KAAWwB,SAAX,GAAuBhE,iBAAiB,CAACkG,OAAlB,CAA0B,KAAK1D,CAA/B,CAAvB,GAA2DwB,SAV3D;AAWH1E,MAAAA,CAAC,EAAE,KAAKA,CAAL,KAAW0E,SAAX,GAAuBhE,iBAAiB,CAACkG,OAAlB,CAA0B,KAAK5G,CAA/B,CAAvB,GAA2D0E,SAX3D;AAYHtF,MAAAA,CAAC,EAAE,KAAKA,CAAL,KAAWsF,SAAX,GAAuBhE,iBAAiB,CAACkG,OAAlB,CAA0B,KAAKxH,CAA/B,CAAvB,GAA2DsF;AAZ3D,KAAP;AAcH,GAhBD;;AAiBA,SAAOrD,2BAAP;AACH,CAvTgD,CAuT/CT,iBAAiB,CAACiG,eAvT6B,CAAjD;;AAwTApG,OAAO,CAACqG,OAAR,GAAkBzF,2BAAlB","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nvar FeeMarketEIP1559Transaction = /** @class */ (function (_super) {\n    __extends(FeeMarketEIP1559Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function FeeMarketEIP1559Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _a, _b;\n        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        _this.DEFAULT_HARDFORK = 'london';\n        var chainId = txData.chainId, accessList = txData.accessList, maxFeePerGas = txData.maxFeePerGas, maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n        _this.common = _this._getCommon(opts.common, chainId);\n        _this.chainId = _this.common.chainIdBN();\n        if (!_this.common.isActivatedEIP(1559)) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n        _this.accessList = accessListData.accessList;\n        _this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_1.AccessLists.verifyAccessList(_this.accessList);\n        _this.maxFeePerGas = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        _this._validateCannotExceedMaxInteger({\n            maxFeePerGas: _this.maxFeePerGas,\n            maxPriorityFeePerGas: _this.maxPriorityFeePerGas,\n        }, 256);\n        if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n            throw new Error('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n        }\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n            throw new Error('The y-parity of the transaction should either be 0 or 1');\n        }\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n        /**\n         * EIP-2930 alias for `r`\n         *\n         * @deprecated use `r` instead\n         */\n        get: function () {\n            return this.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n        /**\n         * EIP-2930 alias for `s`\n         *\n         * @deprecated use `s` instead\n         */\n        get: function () {\n            return this.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n        /**\n         * EIP-2930 alias for `v`\n         *\n         * @deprecated use `v` instead\n         */\n        get: function () {\n            return this.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized\n                .slice(0, 1)\n                .toString('hex'));\n        }\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n     *\n     * Note: This means that the Buffer should start with 0x01.\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n     */\n    FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        var _a = __read(values, 12), chainId = _a[0], nonce = _a[1], maxPriorityFeePerGas = _a[2], maxFeePerGas = _a[3], gasLimit = _a[4], to = _a[5], value = _a[6], data = _a[7], accessList = _a[8], v = _a[9], r = _a[10], s = _a[11];\n        return new FeeMarketEIP1559Transaction({\n            chainId: new ethereumjs_util_1.BN(chainId),\n            nonce: nonce,\n            maxPriorityFeePerGas: maxPriorityFeePerGas,\n            maxFeePerGas: maxFeePerGas,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n        var cost = _super.prototype.getDataFee.call(this);\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        return cost;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n        if (baseFee === void 0) { baseFee = new ethereumjs_util_1.BN(0); }\n        var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n        var gasPrice = inclusionFeePerGas.add(baseFee);\n        return this.gasLimit.mul(gasPrice).add(this.value);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\n     */\n    FeeMarketEIP1559Transaction.prototype.raw = function () {\n        return [\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.maxPriorityFeePerGas),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.maxFeePerGas),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n            this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n            this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceeding and concatenated to\n     * the RLP encoding of the values.\n     */\n    FeeMarketEIP1559Transaction.prototype.serialize = function () {\n        var base = this.raw();\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    };\n    FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var base = this.raw().slice(0, 9);\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n        if (hashMessage) {\n            return ethereumjs_util_1.keccak256(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    FeeMarketEIP1559Transaction.prototype.hash = function () {\n        if (!this.isSigned()) {\n            throw new Error('Cannot call hash method if transaction is not signed');\n        }\n        return ethereumjs_util_1.keccak256(this.serialize());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n        return this.getMessageToSign();\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        if (!this.isSigned()) {\n            throw new Error('Cannot call this method if transaction is not signed');\n        }\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return ethereumjs_util_1.ecrecover(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign\n            ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n        }\n        catch (e) {\n            throw new Error('Invalid Signature');\n        }\n    };\n    FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n        var opts = {\n            common: this.common,\n        };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: new ethereumjs_util_1.BN(v - 27),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: ethereumjs_util_1.bnToHex(this.chainId),\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\n            maxPriorityFeePerGas: ethereumjs_util_1.bnToHex(this.maxPriorityFeePerGas),\n            maxFeePerGas: ethereumjs_util_1.bnToHex(this.maxFeePerGas),\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: ethereumjs_util_1.bnToHex(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\n        };\n    };\n    return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = FeeMarketEIP1559Transaction;\n"]},"metadata":{},"sourceType":"script"}