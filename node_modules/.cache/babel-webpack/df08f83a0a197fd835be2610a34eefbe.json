{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var TransactionTypes;\n\n(function (TransactionTypes) {\n  TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n  TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n  TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n\n; ///////////////////////////////\n\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n\n  return getAddress(value);\n}\n\nfunction handleNumber(value) {\n  if (value === \"0x\") {\n    return Zero;\n  }\n\n  return BigNumber.from(value);\n} // Legacy Transaction Fields\n\n\nvar transactionFields = [{\n  name: \"nonce\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasPrice\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasLimit\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"to\",\n  length: 20\n}, {\n  name: \"value\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"data\"\n}];\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  type: true,\n  value: true\n};\nexport function computeAddress(key) {\n  var publicKey = computePublicKey(key);\n  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\n\nfunction formatNumber(value, name) {\n  var result = stripZeros(BigNumber.from(value).toHexString());\n\n  if (result.length > 32) {\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n  }\n\n  return result;\n}\n\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: (storageKeys || []).map(function (storageKey, index) {\n      if (hexDataLength(storageKey) !== 32) {\n        logger.throwArgumentError(\"invalid access list storageKey\", \"accessList[\".concat(addr, \":\").concat(index, \"]\"), storageKey);\n      }\n\n      return storageKey.toLowerCase();\n    })\n  };\n}\n\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map(function (set, index) {\n      if (Array.isArray(set)) {\n        if (set.length > 2) {\n          logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", \"value[\".concat(index, \"]\"), set);\n        }\n\n        return accessSetify(set[0], set[1]);\n      }\n\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n\n  var result = Object.keys(value).map(function (addr) {\n    var storageKeys = value[addr].reduce(function (accum, storageKey) {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n  return result;\n}\n\nfunction formatAccessList(value) {\n  return accessListify(value).map(function (set) {\n    return [set.address, set.storageKeys];\n  });\n}\n\nfunction _serializeEip1559(transaction, signature) {\n  // If there is an explicit gasPrice, make sure it matches the\n  // EIP-1559 fees; otherwise they may not understand what they\n  // think they are setting in terms of fee.\n  if (transaction.gasPrice != null) {\n    var gasPrice = BigNumber.from(transaction.gasPrice);\n    var maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n\n    if (!gasPrice.eq(maxFeePerGas)) {\n      logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n        gasPrice: gasPrice,\n        maxFeePerGas: maxFeePerGas\n      });\n    }\n  }\n\n  var fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n\n  if (signature) {\n    var sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n\n  return hexConcat([\"0x02\", RLP.encode(fields)]);\n}\n\nfunction _serializeEip2930(transaction, signature) {\n  var fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.gasPrice || 0, \"gasPrice\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n\n  if (signature) {\n    var sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n\n  return hexConcat([\"0x01\", RLP.encode(fields)]);\n} // Legacy Transactions and EIP-155\n\n\nfunction _serialize(transaction, signature) {\n  checkProperties(transaction, allowedTransactionKeys);\n  var raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    var value = transaction[fieldInfo.name] || [];\n    var options = {};\n\n    if (fieldInfo.numeric) {\n      options.hexPad = \"left\";\n    }\n\n    value = arrayify(hexlify(value, options)); // Fixed-width field\n\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n    } // Variable-width (with a maximum)\n\n\n    if (fieldInfo.maxLength) {\n      value = stripZeros(value);\n\n      if (value.length > fieldInfo.maxLength) {\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n    }\n\n    raw.push(hexlify(value));\n  });\n  var chainId = 0;\n\n  if (transaction.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = transaction.chainId;\n\n    if (typeof chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n    }\n  } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    chainId = Math.floor((signature.v - 35) / 2);\n  } // We have an EIP-155 transaction (chainId was specified and non-zero)\n\n\n  if (chainId !== 0) {\n    raw.push(hexlify(chainId)); // @TODO: hexValue?\n\n    raw.push(\"0x\");\n    raw.push(\"0x\");\n  } // Requesting an unsigned transation\n\n\n  if (!signature) {\n    return RLP.encode(raw);\n  } // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n\n\n  var sig = splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n  var v = 27 + sig.recoveryParam;\n\n  if (chainId !== 0) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += chainId * 2 + 8; // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n\n    if (sig.v > 28 && sig.v !== v) {\n      logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n  } else if (sig.v !== v) {\n    logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n  }\n\n  raw.push(hexlify(v));\n  raw.push(stripZeros(arrayify(sig.r)));\n  raw.push(stripZeros(arrayify(sig.s)));\n  return RLP.encode(raw);\n}\n\nexport function serialize(transaction, signature) {\n  // Legacy and EIP-155 Transactions\n  if (transaction.type == null || transaction.type === 0) {\n    if (transaction.accessList != null) {\n      logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n    }\n\n    return _serialize(transaction, signature);\n  } // Typed Transactions (EIP-2718)\n\n\n  switch (transaction.type) {\n    case 1:\n      return _serializeEip2930(transaction, signature);\n\n    case 2:\n      return _serializeEip1559(transaction, signature);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(\"unsupported transaction type: \".concat(transaction.type), Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"serializeTransaction\",\n    transactionType: transaction.type\n  });\n}\n\nfunction _parseEipSignature(tx, fields, serialize) {\n  try {\n    var recid = handleNumber(fields[0]).toNumber();\n\n    if (recid !== 0 && recid !== 1) {\n      throw new Error(\"bad recid\");\n    }\n\n    tx.v = recid;\n  } catch (error) {\n    logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n  }\n\n  tx.r = hexZeroPad(fields[1], 32);\n  tx.s = hexZeroPad(fields[2], 32);\n\n  try {\n    var digest = keccak256(serialize(tx));\n    tx.from = recoverAddress(digest, {\n      r: tx.r,\n      s: tx.s,\n      recoveryParam: tx.v\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction _parseEip1559(payload) {\n  var transaction = RLP.decode(payload.slice(1));\n\n  if (transaction.length !== 9 && transaction.length !== 12) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n  }\n\n  var maxPriorityFeePerGas = handleNumber(transaction[2]);\n  var maxFeePerGas = handleNumber(transaction[3]);\n  var tx = {\n    type: 2,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleNumber(transaction[4]),\n    to: handleAddress(transaction[5]),\n    value: handleNumber(transaction[6]),\n    data: transaction[7],\n    accessList: accessListify(transaction[8])\n  }; // Unsigned EIP-1559 Transaction\n\n  if (transaction.length === 9) {\n    return tx;\n  }\n\n  tx.hash = keccak256(payload);\n\n  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n\n  return tx;\n}\n\nfunction _parseEip2930(payload) {\n  var transaction = RLP.decode(payload.slice(1));\n\n  if (transaction.length !== 8 && transaction.length !== 11) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n  }\n\n  var tx = {\n    type: 1,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    gasPrice: handleNumber(transaction[2]),\n    gasLimit: handleNumber(transaction[3]),\n    to: handleAddress(transaction[4]),\n    value: handleNumber(transaction[5]),\n    data: transaction[6],\n    accessList: accessListify(transaction[7])\n  }; // Unsigned EIP-2930 Transaction\n\n  if (transaction.length === 8) {\n    return tx;\n  }\n\n  tx.hash = keccak256(payload);\n\n  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n\n  return tx;\n} // Legacy Transactions and EIP-155\n\n\nfunction _parse(rawTransaction) {\n  var transaction = RLP.decode(rawTransaction);\n\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n  }\n\n  var tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 6) {\n    return tx;\n  }\n\n  try {\n    tx.v = BigNumber.from(transaction[6]).toNumber();\n  } catch (error) {\n    console.log(error);\n    return tx;\n  }\n\n  tx.r = hexZeroPad(transaction[7], 32);\n  tx.s = hexZeroPad(transaction[8], 32);\n\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    var recoveryParam = tx.v - 27;\n    var raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    var digest = keccak256(RLP.encode(raw));\n\n    try {\n      tx.from = recoverAddress(digest, {\n        r: hexlify(tx.r),\n        s: hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    tx.hash = keccak256(rawTransaction);\n  }\n\n  tx.type = null;\n  return tx;\n}\n\nexport function parse(rawTransaction) {\n  var payload = arrayify(rawTransaction); // Legacy and EIP-155 Transactions\n\n  if (payload[0] > 0x7f) {\n    return _parse(payload);\n  } // Typed Transaction (EIP-2718)\n\n\n  switch (payload[0]) {\n    case 1:\n      return _parseEip2930(payload);\n\n    case 2:\n      return _parseEip1559(payload);\n\n    default:\n      break;\n  }\n\n  return logger.throwError(\"unsupported transaction type: \".concat(payload[0]), Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"parseTransaction\",\n    transactionType: payload[0]\n  });\n}","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethersproject/transactions/lib.esm/index.js"],"names":["getAddress","BigNumber","arrayify","hexConcat","hexDataLength","hexDataSlice","hexlify","hexZeroPad","isBytesLike","splitSignature","stripZeros","Zero","keccak256","checkProperties","RLP","computePublicKey","recoverPublicKey","Logger","version","logger","TransactionTypes","handleAddress","value","handleNumber","from","transactionFields","name","maxLength","numeric","length","allowedTransactionKeys","chainId","data","gasLimit","gasPrice","nonce","to","type","computeAddress","key","publicKey","recoverAddress","digest","signature","formatNumber","result","toHexString","throwArgumentError","accessSetify","addr","storageKeys","address","map","storageKey","index","toLowerCase","accessListify","Array","isArray","set","Object","keys","reduce","accum","sort","a","b","localeCompare","formatAccessList","_serializeEip1559","transaction","maxFeePerGas","eq","fields","maxPriorityFeePerGas","accessList","sig","push","recoveryParam","r","s","encode","_serializeEip2930","_serialize","raw","forEach","fieldInfo","options","hexPad","v","Math","floor","pop","serialize","throwError","errors","UNSUPPORTED_OPERATION","operation","transactionType","_parseEipSignature","tx","recid","toNumber","Error","error","console","log","_parseEip1559","payload","decode","slice","hash","_parseEip2930","_parse","rawTransaction","isZero","parse"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros, } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport var TransactionTypes;\n(function (TransactionTypes) {\n    TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n    TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n    TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return Zero;\n    }\n    return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    { name: \"nonce\", maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\", length: 20 },\n    { name: \"value\", maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true\n};\nexport function computeAddress(key) {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index) => {\n            if (hexDataLength(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _serializeEip1559(transaction, signature) {\n    // If there is an explicit gasPrice, make sure it matches the\n    // EIP-1559 fees; otherwise they may not understand what they\n    // think they are setting in terms of fee.\n    if (transaction.gasPrice != null) {\n        const gasPrice = BigNumber.from(transaction.gasPrice);\n        const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n        if (!gasPrice.eq(maxFeePerGas)) {\n            logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n                gasPrice, maxFeePerGas\n            });\n        }\n    }\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x02\", RLP.encode(fields)]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x01\", RLP.encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    checkProperties(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        let value = transaction[fieldInfo.name] || ([]);\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = arrayify(hexlify(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n            }\n        }\n        raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof (chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    }\n    else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transation\n    if (!signature) {\n        return RLP.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    }\n    else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return RLP.encode(raw);\n}\nexport function serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null || transaction.type === 0) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch (transaction.type) {\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        case 2:\n            return _serializeEip1559(transaction, signature);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n    try {\n        const recid = handleNumber(fields[0]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    }\n    catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n    tx.r = hexZeroPad(fields[1], 32);\n    tx.s = hexZeroPad(fields[2], 32);\n    try {\n        const digest = keccak256(serialize(tx));\n        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    }\n    catch (error) {\n        console.log(error);\n    }\n}\nfunction _parseEip1559(payload) {\n    const transaction = RLP.decode(payload.slice(1));\n    if (transaction.length !== 9 && transaction.length !== 12) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n    }\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx = {\n        type: 2,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleNumber(transaction[4]),\n        to: handleAddress(transaction[5]),\n        value: handleNumber(transaction[6]),\n        data: transaction[7],\n        accessList: accessListify(transaction[8]),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (transaction.length === 9) {\n        return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n    return tx;\n}\nfunction _parseEip2930(payload) {\n    const transaction = RLP.decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7])\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = RLP.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n    }\n    catch (error) {\n        console.log(error);\n        return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = keccak256(RLP.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) {\n            console.log(error);\n        }\n        tx.hash = keccak256(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nexport function parse(rawTransaction) {\n    const payload = arrayify(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch (payload[0]) {\n        case 1:\n            return _parseEip2930(payload);\n        case 2:\n            return _parseEip1559(payload);\n        default:\n            break;\n    }\n    return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n}\n"]},"metadata":{},"sourceType":"module"}