{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n\nvar AccessListEIP2930Transaction = function (_super) {\n  __extends(AccessListEIP2930Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function AccessListEIP2930Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a, _b;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n\n    _this.DEFAULT_HARDFORK = 'berlin';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        gasPrice = txData.gasPrice;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN(); // EIP-2718 check is done in Common\n\n    if (!_this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice === '' ? '0x' : gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      throw new Error('The y-parity of the transaction should either be 0 or 1');\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function get() {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function get() {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function get() {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n  AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new AccessListEIP2930Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n\n\n  AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized.slice(0, 1).toString('hex'));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n\n\n  AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n\n\n  AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n\n    var _a = __read(values, 11),\n        chainId = _a[0],\n        nonce = _a[1],\n        gasPrice = _a[2],\n        gasLimit = _a[3],\n        to = _a[4],\n        value = _a[5],\n        data = _a[6],\n        accessList = _a[7],\n        v = _a[8],\n        r = _a[9],\n        s = _a[10];\n\n    var emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getDataFee = function () {\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId), ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.accessList, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceeding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 8);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return ethereumjs_util_1.keccak256(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call hash method if transaction is not signed');\n    }\n\n    return ethereumjs_util_1.keccak256(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw new Error('Cannot call this method if transaction is not signed');\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        yParity = _b.yParity,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n      ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n\n  AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  AccessListEIP2930Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: ethereumjs_util_1.bnToHex(this.chainId),\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = AccessListEIP2930Transaction;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","defineProperty","exports","ethereumjs_util_1","require","baseTransaction_1","types_1","util_1","TRANSACTION_TYPE","TRANSACTION_TYPE_BUFFER","Buffer","from","toString","padStart","AccessListEIP2930Transaction","_super","txData","opts","_a","_b","_this","type","DEFAULT_HARDFORK","chainId","accessList","gasPrice","common","_getCommon","chainIdBN","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessLists","getAccessListData","AccessListJSON","verifyAccessList","BN","toBuffer","_validateCannotExceedMaxInteger","v","eqn","gteHardfork","gt","N_DIV_2","freeze","get","enumerable","configurable","fromTxData","fromSerializedTx","serialized","slice","equals","values","rlp","decode","isArray","fromValuesArray","fromRlpSerializedTx","nonce","gasLimit","to","data","emptyAccessList","undefined","getDataFee","cost","iaddn","getDataFeeEIP2930","getUpfrontCost","mul","add","raw","bnToUnpaddedBuffer","buf","serialize","base","encode","getMessageToSign","hashMessage","message","keccak256","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","yParity","ecrecover","addn","_processSignature","toJSON","accessListJSON","getAccessListJSON","bnToHex","BaseTransaction","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nvar AccessListEIP2930Transaction = /** @class */ (function (_super) {\n    __extends(AccessListEIP2930Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function AccessListEIP2930Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _a, _b;\n        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        _this.DEFAULT_HARDFORK = 'berlin';\n        var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;\n        _this.common = _this._getCommon(opts.common, chainId);\n        _this.chainId = _this.common.chainIdBN();\n        // EIP-2718 check is done in Common\n        if (!_this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n        _this.accessList = accessListData.accessList;\n        _this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_1.AccessLists.verifyAccessList(_this.accessList);\n        _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice === '' ? '0x' : gasPrice));\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n            throw new Error('The y-parity of the transaction should either be 0 or 1');\n        }\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n        /**\n         * EIP-2930 alias for `r`\n         *\n         * @deprecated use `r` instead\n         */\n        get: function () {\n            return this.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n        /**\n         * EIP-2930 alias for `s`\n         *\n         * @deprecated use `s` instead\n         */\n        get: function () {\n            return this.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n        /**\n         * EIP-2930 alias for `v`\n         *\n         * @deprecated use `v` instead\n         */\n        get: function () {\n            return this.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new AccessListEIP2930Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized\n                .slice(0, 1)\n                .toString('hex'));\n        }\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n     *\n     * Note: This means that the Buffer should start with 0x01.\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n     */\n    AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];\n        var emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: new ethereumjs_util_1.BN(chainId),\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    AccessListEIP2930Transaction.prototype.getDataFee = function () {\n        var cost = _super.prototype.getDataFee.call(this);\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        return cost;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\n     */\n    AccessListEIP2930Transaction.prototype.raw = function () {\n        return [\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n            this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n            this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceeding and concatenated to\n     * the RLP encoding of the values.\n     */\n    AccessListEIP2930Transaction.prototype.serialize = function () {\n        var base = this.raw();\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    };\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var base = this.raw().slice(0, 8);\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n        if (hashMessage) {\n            return ethereumjs_util_1.keccak256(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    AccessListEIP2930Transaction.prototype.hash = function () {\n        if (!this.isSigned()) {\n            throw new Error('Cannot call hash method if transaction is not signed');\n        }\n        return ethereumjs_util_1.keccak256(this.serialize());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n        return this.getMessageToSign();\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        if (!this.isSigned()) {\n            throw new Error('Cannot call this method if transaction is not signed');\n        }\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;\n        try {\n            return ethereumjs_util_1.ecrecover(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n            ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n        }\n        catch (e) {\n            throw new Error('Invalid Signature');\n        }\n    };\n    AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n        var opts = {\n            common: this.common,\n        };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: new ethereumjs_util_1.BN(v - 27),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    AccessListEIP2930Transaction.prototype.toJSON = function () {\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: ethereumjs_util_1.bnToHex(this.chainId),\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\n            gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: ethereumjs_util_1.bnToHex(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\n        };\n    };\n    return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = AccessListEIP2930Transaction;\n"]},"metadata":{},"sourceType":"script"}