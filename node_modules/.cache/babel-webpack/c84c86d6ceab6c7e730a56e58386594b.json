{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\n\n\nvar Capability;\n\n(function (Capability) {\n  /**\n   * Tx supports EIP-155 replay protection\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n   */\n  Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n  /**\n   * Tx supports EIP-1559 gas fee market mechansim\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n   */\n\n  Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n  /**\n   * Tx is a typed transaction as defined in EIP-2718\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n   */\n\n  Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n  /**\n   * Tx supports access list generation as defined in EIP-2930\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n   */\n\n  Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability = exports.Capability || (exports.Capability = {}));\n\nfunction isAccessListBuffer(input) {\n  if (input.length === 0) {\n    return true;\n  }\n\n  var firstItem = input[0];\n\n  if (Array.isArray(firstItem)) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.isAccessListBuffer = isAccessListBuffer;\n\nfunction isAccessList(input) {\n  return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\n}\n\nexports.isAccessList = isAccessList;\n/**\n * A const defining secp256k1n/2\n */\n\nexports.N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/tx/dist.browser/types.js"],"names":["Object","defineProperty","exports","value","N_DIV_2","isAccessList","isAccessListBuffer","Capability","ethereumjs_util_1","require","input","length","firstItem","Array","isArray","BN"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,kBAAR,GAA6BJ,OAAO,CAACK,UAAR,GAAqB,KAAK,CAAhG;;AACA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,iBAAD,CAA/B;AACA;AACA;AACA;AACA;;;AACA,IAAIF,UAAJ;;AACA,CAAC,UAAUA,UAAV,EAAsB;AACnB;AACJ;AACA;AACA;AACIA,EAAAA,UAAU,CAACA,UAAU,CAAC,wBAAD,CAAV,GAAuC,GAAxC,CAAV,GAAyD,wBAAzD;AACA;AACJ;AACA;AACA;;AACIA,EAAAA,UAAU,CAACA,UAAU,CAAC,kBAAD,CAAV,GAAiC,IAAlC,CAAV,GAAoD,kBAApD;AACA;AACJ;AACA;AACA;;AACIA,EAAAA,UAAU,CAACA,UAAU,CAAC,yBAAD,CAAV,GAAwC,IAAzC,CAAV,GAA2D,yBAA3D;AACA;AACJ;AACA;AACA;;AACIA,EAAAA,UAAU,CAACA,UAAU,CAAC,oBAAD,CAAV,GAAmC,IAApC,CAAV,GAAsD,oBAAtD;AACH,CArBD,EAqBGA,UAAU,GAAGL,OAAO,CAACK,UAAR,KAAuBL,OAAO,CAACK,UAAR,GAAqB,EAA5C,CArBhB;;AAsBA,SAASD,kBAAT,CAA4BI,KAA5B,EAAmC;AAC/B,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACpB,WAAO,IAAP;AACH;;AACD,MAAIC,SAAS,GAAGF,KAAK,CAAC,CAAD,CAArB;;AACA,MAAIG,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC1B,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACDV,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,YAAT,CAAsBK,KAAtB,EAA6B;AACzB,SAAO,CAACJ,kBAAkB,CAACI,KAAD,CAA1B,CADyB,CACU;AACtC;;AACDR,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;;AACAH,OAAO,CAACE,OAAR,GAAkB,IAAII,iBAAiB,CAACO,EAAtB,CAAyB,kEAAzB,EAA6F,EAA7F,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nvar Capability;\n(function (Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechansim\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability = exports.Capability || (exports.Capability = {}));\nfunction isAccessListBuffer(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    var firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nexports.isAccessListBuffer = isAccessListBuffer;\nfunction isAccessList(input) {\n    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\n}\nexports.isAccessList = isAccessList;\n/**\n * A const defining secp256k1n/2\n */\nexports.N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n"]},"metadata":{},"sourceType":"script"}