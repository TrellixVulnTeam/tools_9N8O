{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\n\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\n\n\nvar setLength = function setLength(msg, length, right) {\n  var buf = exports.zeros(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nexports.setLengthLeft = function (msg, length) {\n  helpers_1.assertIsBuffer(msg);\n  return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nexports.setLengthRight = function (msg, length) {\n  helpers_1.assertIsBuffer(msg);\n  return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\n\nvar stripZeros = function stripZeros(a) {\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\n\n\nexports.unpadBuffer = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\n\n\nexports.unpadArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return stripZeros(a);\n};\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\n\n\nexports.unpadHexString = function (a) {\n  helpers_1.assertIsHexString(a);\n  a = ethjs_util_1.stripHexPrefix(a);\n  return stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\n\n\nexports.toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!ethjs_util_1.isHexString(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n    }\n\n    return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return ethjs_util_1.intToBuffer(v);\n  }\n\n  if (bn_js_1.default.isBN(v)) {\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\n\nexports.bufferToInt = function (buf) {\n  return new bn_js_1.default(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\n\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\n\nexports.fromSigned = function (num) {\n  return new bn_js_1.default(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\n\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\n\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return ethjs_util_1.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\n\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\" + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n\n    return array;\n  }\n};","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/ethereumjs-util/dist.browser/bytes.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","baToJSON","addHexPrefix","toUnsigned","fromSigned","bufferToHex","bufferToInt","toBuffer","unpadHexString","unpadArray","unpadBuffer","setLengthRight","setLengthLeft","zeros","bn_js_1","require","ethjs_util_1","helpers_1","bytes","Buffer","allocUnsafe","fill","setLength","msg","length","right","buf","copy","slice","assertIsBuffer","stripZeros","a","first","toString","assertIsArray","assertIsHexString","stripHexPrefix","v","undefined","isBuffer","from","Array","isArray","Uint8Array","isHexString","Error","padToEven","intToBuffer","default","isBN","toArrayLike","toArray","toNumber","num","fromTwos","toTwos","str","isHexPrefixed","ba","array","i","push"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar ethjs_util_1 = require(\"ethjs-util\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nvar setLength = function (msg, length, right) {\n    var buf = exports.zeros(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthLeft = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthRight = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nvar stripZeros = function (a) {\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexports.unpadBuffer = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexports.unpadArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexports.unpadHexString = function (a) {\n    helpers_1.assertIsHexString(a);\n    a = ethjs_util_1.stripHexPrefix(a);\n    return stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!ethjs_util_1.isHexString(v)) {\n            throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n        }\n        return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return ethjs_util_1.intToBuffer(v);\n    }\n    if (bn_js_1.default.isBN(v)) {\n        return v.toArrayLike(Buffer);\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n    return new bn_js_1.default(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n    buf = exports.toBuffer(buf);\n    return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n    return new bn_js_1.default(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjs_util_1.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\" + ba.toString('hex');\n    }\n    else if (ba instanceof Array) {\n        var array = [];\n        for (var i = 0; i < ba.length; i++) {\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}