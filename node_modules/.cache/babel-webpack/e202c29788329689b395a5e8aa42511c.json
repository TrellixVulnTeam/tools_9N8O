{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar _1 = require(\".\");\n\nvar TransactionFactory = function () {\n  // It is not possible to instantiate a TransactionFactory object.\n  function TransactionFactory() {}\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n\n\n  TransactionFactory.fromTxData = function (txData, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return _1.Transaction.fromTxData(txData, txOptions);\n    } else {\n      var txType = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.type)).toNumber();\n\n      if (txType === 0) {\n        return _1.Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 1) {\n        return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 2) {\n        return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n      } else {\n        throw new Error(\"Tx instantiation with type \" + txType + \" not supported\");\n      }\n    }\n  };\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromSerializedData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      var EIP = void 0;\n\n      switch (data[0]) {\n        case 1:\n          EIP = 2930;\n          break;\n\n        case 2:\n          EIP = 1559;\n          break;\n\n        default:\n          throw new Error(\"TypedTransaction with ID \" + data[0] + \" unknown\");\n      }\n\n      if (EIP === 1559) {\n        return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n      } else {\n        // EIP === 2930\n        return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n      }\n    } else {\n      return _1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  };\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions);\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return _1.Transaction.fromValuesArray(data, txOptions);\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  };\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param common - This option is not used\n   */\n  // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n\n\n  TransactionFactory.getTransactionClass = function (transactionID, common) {\n    if (transactionID === void 0) {\n      transactionID = 0;\n    }\n\n    var legacyTxn = transactionID == 0 || transactionID >= 0x80 && transactionID <= 0xff;\n\n    if (legacyTxn) {\n      return _1.Transaction;\n    }\n\n    switch (transactionID) {\n      case 1:\n        return _1.AccessListEIP2930Transaction;\n\n      case 2:\n        return _1.FeeMarketEIP1559Transaction;\n\n      default:\n        throw new Error(\"TypedTransaction with ID \" + transactionID + \" unknown\");\n    }\n  };\n\n  return TransactionFactory;\n}();\n\nexports.default = TransactionFactory;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js"],"names":["Object","defineProperty","exports","value","ethereumjs_util_1","require","_1","TransactionFactory","fromTxData","txData","txOptions","type","undefined","Transaction","txType","BN","toBuffer","toNumber","AccessListEIP2930Transaction","FeeMarketEIP1559Transaction","Error","fromSerializedData","data","EIP","fromSerializedTx","fromBlockBodyData","Buffer","isBuffer","Array","isArray","fromValuesArray","getTransactionClass","transactionID","common","legacyTxn","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar _1 = require(\".\");\nvar TransactionFactory = /** @class */ (function () {\n    // It is not possible to instantiate a TransactionFactory object.\n    function TransactionFactory() {\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    TransactionFactory.fromTxData = function (txData, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _1.Transaction.fromTxData(txData, txOptions);\n        }\n        else {\n            var txType = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.type)).toNumber();\n            if (txType === 0) {\n                return _1.Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 1) {\n                return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 2) {\n                return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(\"Tx instantiation with type \" + txType + \" not supported\");\n            }\n        }\n    };\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Buffer\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromSerializedData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            var EIP = void 0;\n            switch (data[0]) {\n                case 1:\n                    EIP = 2930;\n                    break;\n                case 2:\n                    EIP = 1559;\n                    break;\n                default:\n                    throw new Error(\"TypedTransaction with ID \" + data[0] + \" unknown\");\n            }\n            if (EIP === 1559) {\n                return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n            }\n            else {\n                // EIP === 2930\n                return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n            }\n        }\n        else {\n            return _1.Transaction.fromSerializedTx(data, txOptions);\n        }\n    };\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Buffer[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Buffer or Buffer[]\n     * @param txOptions - The transaction options\n     */\n    TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n        if (txOptions === void 0) { txOptions = {}; }\n        if (Buffer.isBuffer(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _1.Transaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    };\n    /**\n     * This helper method allows one to retrieve the class which matches the transactionID\n     * If transactionID is undefined, returns the legacy transaction class.\n     * @deprecated - This method is deprecated and will be removed on the next major release\n     * @param transactionID\n     * @param common - This option is not used\n     */\n    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n    TransactionFactory.getTransactionClass = function (transactionID, common) {\n        if (transactionID === void 0) { transactionID = 0; }\n        var legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff);\n        if (legacyTxn) {\n            return _1.Transaction;\n        }\n        switch (transactionID) {\n            case 1:\n                return _1.AccessListEIP2930Transaction;\n            case 2:\n                return _1.FeeMarketEIP1559Transaction;\n            default:\n                throw new Error(\"TypedTransaction with ID \" + transactionID + \" unknown\");\n        }\n    };\n    return TransactionFactory;\n}());\nexports.default = TransactionFactory;\n"]},"metadata":{},"sourceType":"script"}