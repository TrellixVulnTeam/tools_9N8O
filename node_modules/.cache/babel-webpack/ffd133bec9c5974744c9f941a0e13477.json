{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsBuffer(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak_1.keccak224(a);\n      }\n\n    case 256:\n      {\n        return keccak_1.keccak256(a);\n      }\n\n    case 384:\n      {\n        return keccak_1.keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak_1.keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsString(a);\n  var buf = Buffer.from(a, 'utf8');\n  return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsHexString(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\n\n\nexports.keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsArray(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\n\n\nvar _sha256 = function _sha256(a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\n\n\nexports.sha256 = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\n\n\nexports.sha256FromString = function (a) {\n  helpers_1.assertIsString(a);\n  return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\n\n\nexports.sha256FromArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return _sha256(a);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nvar _ripemd160 = function _ripemd160(a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLengthLeft(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  helpers_1.assertIsBuffer(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromString = function (a, padded) {\n  helpers_1.assertIsString(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\n\n\nexports.ripemd160FromArray = function (a, padded) {\n  helpers_1.assertIsArray(a);\n  return _ripemd160(a, padded);\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/ethereumjs-util/dist.browser/hash.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","hasOwnProperty","call","exports","rlphash","ripemd160FromArray","ripemd160FromString","ripemd160","sha256FromArray","sha256FromString","sha256","keccakFromArray","keccakFromHexString","keccakFromString","keccak256","keccak","keccak_1","require","createHash","rlp","bytes_1","helpers_1","a","bits","assertIsBuffer","keccak224","keccak384","keccak512","Error","assertIsString","buf","Buffer","from","assertIsHexString","toBuffer","assertIsArray","_sha256","update","digest","_ripemd160","padded","hash","setLengthLeft","encode"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar rlp = __importStar(require(\"rlp\"));\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsBuffer(a);\n    switch (bits) {\n        case 224: {\n            return keccak_1.keccak224(a);\n        }\n        case 256: {\n            return keccak_1.keccak256(a);\n        }\n        case 384: {\n            return keccak_1.keccak384(a);\n        }\n        case 512: {\n            return keccak_1.keccak512(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\" + bits);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsString(a);\n    var buf = Buffer.from(a, 'utf8');\n    return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromHexString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsHexString(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromArray = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsArray(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256').update(a).digest();\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexports.sha256 = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexports.sha256FromString = function (a) {\n    helpers_1.assertIsString(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexports.sha256FromArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return _sha256(a);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160').update(a).digest();\n    if (padded === true) {\n        return bytes_1.setLengthLeft(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    helpers_1.assertIsBuffer(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromString = function (a, padded) {\n    helpers_1.assertIsString(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromArray = function (a, padded) {\n    helpers_1.assertIsArray(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n"]},"metadata":{},"sourceType":"script"}