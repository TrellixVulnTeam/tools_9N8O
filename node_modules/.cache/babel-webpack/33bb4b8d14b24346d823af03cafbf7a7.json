{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLength = exports.decode = exports.encode = void 0;\n\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\n\n\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\n\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\n\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n\n  return parseInt(v, base);\n}\n\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\n\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  var inputBuffer = toBuffer(input);\n\n  var decoded = _decode(inputBuffer);\n\n  if (stream) {\n    return decoded;\n  }\n\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder');\n  }\n\n  return decoded.data;\n}\n\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\n\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n    return llength + length;\n  }\n}\n\nexports.getLength = getLength;\n/** Decode an input with RLP */\n\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f; // set 0x80 null to 0\n\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n\n    data = input.slice(llength, length + llength);\n\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n\n    innerRemainder = input.slice(llength, totalLength);\n\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\n\n\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\n\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\n\n\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\n\n\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\n\n\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\n\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        return Buffer.from(v);\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v);\n    } else if (BN.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n}","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/rlp/dist/index.js"],"names":["Object","defineProperty","exports","value","getLength","decode","encode","BN","require","input","Array","isArray","output","i","length","push","buf","Buffer","concat","encodeLength","inputBuf","toBuffer","safeParseInt","v","base","slice","Error","parseInt","len","offset","from","hexLength","intToHex","lLength","firstByte","stream","inputBuffer","decoded","_decode","remainder","data","llength","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","integer","hex","padToEven","a","intToBuffer","isBuffer","undefined","Uint8Array","isBN","toArray"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLength = exports.decode = exports.encode = void 0;\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        var output = [];\n        for (var i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        var buf = Buffer.concat(output);\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\n    }\n    else {\n        var inputBuf = toBuffer(input);\n        return inputBuf.length === 1 && inputBuf[0] < 128\n            ? inputBuf\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n    }\n}\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n    if (v.slice(0, 2) === '00') {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Buffer.from([len + offset]);\n    }\n    else {\n        var hexLength = intToHex(len);\n        var lLength = hexLength.length / 2;\n        var firstByte = intToHex(offset + 55 + lLength);\n        return Buffer.from(firstByte + hexLength, 'hex');\n    }\n}\nfunction decode(input, stream) {\n    if (stream === void 0) { stream = false; }\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var decoded = _decode(inputBuffer);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid remainder');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var firstByte = inputBuffer[0];\n    if (firstByte <= 0x7f) {\n        return inputBuffer.length;\n    }\n    else if (firstByte <= 0xb7) {\n        return firstByte - 0x7f;\n    }\n    else if (firstByte <= 0xbf) {\n        return firstByte - 0xb6;\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        return firstByte - 0xbf;\n    }\n    else {\n        // a list  over 55 bytes long\n        var llength = firstByte - 0xf6;\n        var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n        return llength + length;\n    }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    var length, llength, data, innerRemainder, d;\n    var decoded = [];\n    var firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Buffer.from([]);\n        }\n        else {\n            data = input.slice(1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = input.slice(llength, length + llength);\n        if (data.length < length) {\n            throw new Error('invalid RLP: not enough bytes for string');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = input.slice(1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list  over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        var totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid rlp: total length is larger than the data');\n        }\n        innerRemainder = input.slice(llength, totalLength);\n        if (innerRemainder.length === 0) {\n            throw new Error('invalid rlp, List has a invalid length');\n        }\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    var hex = integer.toString(16);\n    return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n    var hex = intToHex(integer);\n    return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (typeof v === 'string') {\n            if (isHexPrefixed(v)) {\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n            }\n            else {\n                return Buffer.from(v);\n            }\n        }\n        else if (typeof v === 'number' || typeof v === 'bigint') {\n            if (!v) {\n                return Buffer.from([]);\n            }\n            else {\n                return intToBuffer(v);\n            }\n        }\n        else if (v === null || v === undefined) {\n            return Buffer.from([]);\n        }\n        else if (v instanceof Uint8Array) {\n            return Buffer.from(v);\n        }\n        else if (BN.isBN(v)) {\n            // converts a BN to a Buffer\n            return Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n}\n"]},"metadata":{},"sourceType":"script"}