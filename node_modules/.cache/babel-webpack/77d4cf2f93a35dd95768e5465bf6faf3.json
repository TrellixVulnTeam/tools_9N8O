{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  var errors = [];\n\n  var checkErrors = function checkErrors(path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n\n    for (var key in object) {\n      var childPath = path.slice();\n      childPath.push(key);\n\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n\n  checkErrors([], result);\n  return errors;\n}\nexport var Coder = /*#__PURE__*/function () {\n  function Coder(name, type, localName, dynamic) {\n    _classCallCheck(this, Coder);\n\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n\n  _createClass(Coder, [{\n    key: \"_throwError\",\n    value: function _throwError(message, value) {\n      logger.throwArgumentError(message, this.localName, value);\n    }\n  }]);\n\n  return Coder;\n}();\nexport var Writer = /*#__PURE__*/function () {\n  function Writer(wordSize) {\n    _classCallCheck(this, Writer);\n\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = [];\n    this._dataLength = 0;\n    this._padding = new Uint8Array(wordSize);\n  }\n\n  _createClass(Writer, [{\n    key: \"data\",\n    get: function get() {\n      return hexConcat(this._data);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._dataLength;\n    }\n  }, {\n    key: \"_writeData\",\n    value: function _writeData(data) {\n      this._data.push(data);\n\n      this._dataLength += data.length;\n      return data.length;\n    }\n  }, {\n    key: \"appendWriter\",\n    value: function appendWriter(writer) {\n      return this._writeData(concat(writer._data));\n    } // Arrayish items; padded on the right to wordSize\n\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(value) {\n      var bytes = arrayify(value);\n      var paddingOffset = bytes.length % this.wordSize;\n\n      if (paddingOffset) {\n        bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n      }\n\n      return this._writeData(bytes);\n    }\n  }, {\n    key: \"_getValue\",\n    value: function _getValue(value) {\n      var bytes = arrayify(BigNumber.from(value));\n\n      if (bytes.length > this.wordSize) {\n        logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n          length: this.wordSize,\n          offset: bytes.length\n        });\n      }\n\n      if (bytes.length % this.wordSize) {\n        bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n      }\n\n      return bytes;\n    } // BigNumberish items; padded on the left to wordSize\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      return this._writeData(this._getValue(value));\n    }\n  }, {\n    key: \"writeUpdatableValue\",\n    value: function writeUpdatableValue() {\n      var _this = this;\n\n      var offset = this._data.length;\n\n      this._data.push(this._padding);\n\n      this._dataLength += this.wordSize;\n      return function (value) {\n        _this._data[offset] = _this._getValue(value);\n      };\n    }\n  }]);\n\n  return Writer;\n}();\nexport var Reader = /*#__PURE__*/function () {\n  function Reader(data, wordSize, coerceFunc, allowLoose) {\n    _classCallCheck(this, Reader);\n\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    defineReadOnly(this, \"allowLoose\", allowLoose);\n    this._offset = 0;\n  }\n\n  _createClass(Reader, [{\n    key: \"data\",\n    get: function get() {\n      return hexlify(this._data);\n    }\n  }, {\n    key: \"consumed\",\n    get: function get() {\n      return this._offset;\n    } // The default Coerce function\n\n  }, {\n    key: \"coerce\",\n    value: function coerce(name, value) {\n      if (this._coerceFunc) {\n        return this._coerceFunc(name, value);\n      }\n\n      return Reader.coerce(name, value);\n    }\n  }, {\n    key: \"_peekBytes\",\n    value: function _peekBytes(offset, length, loose) {\n      var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n      if (this._offset + alignedLength > this._data.length) {\n        if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n          alignedLength = length;\n        } else {\n          logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n            length: this._data.length,\n            offset: this._offset + alignedLength\n          });\n        }\n      }\n\n      return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n  }, {\n    key: \"subReader\",\n    value: function subReader(offset) {\n      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(length, loose) {\n      var bytes = this._peekBytes(0, length, !!loose);\n\n      this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n      return bytes.slice(0, length);\n    }\n  }, {\n    key: \"readValue\",\n    value: function readValue() {\n      return BigNumber.from(this.readBytes(this.wordSize));\n    }\n  }], [{\n    key: \"coerce\",\n    value: function coerce(name, value) {\n      var match = name.match(\"^u?int([0-9]+)$\");\n\n      if (match && parseInt(match[1]) <= 48) {\n        value = value.toNumber();\n      }\n\n      return value;\n    }\n  }]);\n\n  return Reader;\n}();","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"],"names":["arrayify","concat","hexConcat","hexlify","BigNumber","defineReadOnly","Logger","version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","name","type","localName","dynamic","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","data","length","writer","_writeData","bytes","paddingOffset","from","throwError","BUFFER_OVERRUN","offset","_getValue","Reader","coerceFunc","allowLoose","_offset","_coerceFunc","coerce","loose","alignedLength","Math","ceil","_peekBytes","readBytes","match","parseInt","toNumber"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}