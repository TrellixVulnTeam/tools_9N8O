{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessLists = void 0;\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nvar AccessLists = function () {\n  function AccessLists() {}\n\n  AccessLists.getAccessListData = function (accessList) {\n    var AccessListJSON;\n    var bufferAccessList;\n\n    if (accessList && types_1.isAccessList(accessList)) {\n      AccessListJSON = accessList;\n      var newAccessList = [];\n\n      for (var i = 0; i < accessList.length; i++) {\n        var item = accessList[i];\n        var addressBuffer = ethereumjs_util_1.toBuffer(item.address);\n        var storageItems = [];\n\n        for (var index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(ethereumjs_util_1.toBuffer(item.storageKeys[index]));\n        }\n\n        newAccessList.push([addressBuffer, storageItems]);\n      }\n\n      bufferAccessList = newAccessList;\n    } else {\n      bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : []; // build the JSON\n\n      var json = [];\n\n      for (var i = 0; i < bufferAccessList.length; i++) {\n        var data = bufferAccessList[i];\n        var address = ethereumjs_util_1.bufferToHex(data[0]);\n        var storageKeys = [];\n\n        for (var item = 0; item < data[1].length; item++) {\n          storageKeys.push(ethereumjs_util_1.bufferToHex(data[1][item]));\n        }\n\n        var jsonItem = {\n          address: address,\n          storageKeys: storageKeys\n        };\n        json.push(jsonItem);\n      }\n\n      AccessListJSON = json;\n    }\n\n    return {\n      AccessListJSON: AccessListJSON,\n      accessList: bufferAccessList\n    };\n  };\n\n  AccessLists.verifyAccessList = function (accessList) {\n    for (var key = 0; key < accessList.length; key++) {\n      var accessListItem = accessList[key];\n      var address = accessListItem[0];\n      var storageSlots = accessListItem[1];\n\n      if (accessListItem[2] !== undefined) {\n        throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n      }\n\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n      }\n\n      for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n        }\n      }\n    }\n  };\n\n  AccessLists.getAccessListJSON = function (accessList) {\n    var accessListJSON = [];\n\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var JSONItem = {\n        address: '0x' + ethereumjs_util_1.setLengthLeft(item[0], 20).toString('hex'),\n        storageKeys: []\n      };\n      var storageSlots = item[1];\n\n      for (var slot = 0; slot < storageSlots.length; slot++) {\n        var storageSlot = storageSlots[slot];\n        JSONItem.storageKeys.push('0x' + ethereumjs_util_1.setLengthLeft(storageSlot, 32).toString('hex'));\n      }\n\n      accessListJSON.push(JSONItem);\n    }\n\n    return accessListJSON;\n  };\n\n  AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n    var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n    var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n    var slots = 0;\n\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var storageSlots = item[1];\n      slots += storageSlots.length;\n    }\n\n    var addresses = accessList.length;\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n  };\n\n  return AccessLists;\n}();\n\nexports.AccessLists = AccessLists;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/tx/dist.browser/util.js"],"names":["Object","defineProperty","exports","value","AccessLists","ethereumjs_util_1","require","types_1","getAccessListData","accessList","AccessListJSON","bufferAccessList","isAccessList","newAccessList","i","length","item","addressBuffer","toBuffer","address","storageItems","index","storageKeys","push","json","data","bufferToHex","jsonItem","verifyAccessList","key","accessListItem","storageSlots","undefined","Error","storageSlot","getAccessListJSON","accessListJSON","JSONItem","setLengthLeft","toString","slot","getDataFeeEIP2930","common","accessListStorageKeyCost","param","accessListAddressCost","slots","addresses"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar AccessLists = /** @class */ (function () {\n    function AccessLists() {\n    }\n    AccessLists.getAccessListData = function (accessList) {\n        var AccessListJSON;\n        var bufferAccessList;\n        if (accessList && types_1.isAccessList(accessList)) {\n            AccessListJSON = accessList;\n            var newAccessList = [];\n            for (var i = 0; i < accessList.length; i++) {\n                var item = accessList[i];\n                var addressBuffer = ethereumjs_util_1.toBuffer(item.address);\n                var storageItems = [];\n                for (var index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push(ethereumjs_util_1.toBuffer(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n            // build the JSON\n            var json = [];\n            for (var i = 0; i < bufferAccessList.length; i++) {\n                var data = bufferAccessList[i];\n                var address = ethereumjs_util_1.bufferToHex(data[0]);\n                var storageKeys = [];\n                for (var item = 0; item < data[1].length; item++) {\n                    storageKeys.push(ethereumjs_util_1.bufferToHex(data[1][item]));\n                }\n                var jsonItem = {\n                    address: address,\n                    storageKeys: storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON: AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    };\n    AccessLists.verifyAccessList = function (accessList) {\n        for (var key = 0; key < accessList.length; key++) {\n            var accessListItem = accessList[key];\n            var address = accessListItem[0];\n            var storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length != 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length != 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    };\n    AccessLists.getAccessListJSON = function (accessList) {\n        var accessListJSON = [];\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var JSONItem = {\n                address: '0x' + ethereumjs_util_1.setLengthLeft(item[0], 20).toString('hex'),\n                storageKeys: [],\n            };\n            var storageSlots = item[1];\n            for (var slot = 0; slot < storageSlots.length; slot++) {\n                var storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push('0x' + ethereumjs_util_1.setLengthLeft(storageSlot, 32).toString('hex'));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    };\n    AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n        var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        var slots = 0;\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        var addresses = accessList.length;\n        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n    };\n    return AccessLists;\n}());\nexports.AccessLists = AccessLists;\n"]},"metadata":{},"sourceType":"script"}