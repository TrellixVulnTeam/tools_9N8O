{"ast":null,"code":"\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\n\nfunction detectEthereumProvider() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$mustBeMetaMask = _ref.mustBeMetaMask,\n      mustBeMetaMask = _ref$mustBeMetaMask === void 0 ? false : _ref$mustBeMetaMask,\n      _ref$silent = _ref.silent,\n      silent = _ref$silent === void 0 ? false : _ref$silent,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 3000 : _ref$timeout;\n\n  _validateInputs();\n\n  var handled = false;\n  return new Promise(function (resolve) {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(function () {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      var _window = window,\n          ethereum = _window.ethereum;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        var message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(\"@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.\");\n    }\n\n    if (typeof silent !== 'boolean') {\n      throw new Error(\"@metamask/detect-provider: Expected option 'silent' to be a boolean.\");\n    }\n\n    if (typeof timeout !== 'number') {\n      throw new Error(\"@metamask/detect-provider: Expected option 'timeout' to be a number.\");\n    }\n  }\n}\n\nmodule.exports = detectEthereumProvider;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@metamask/detect-provider/dist/index.js"],"names":["detectEthereumProvider","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","window","ethereum","handleEthereum","addEventListener","once","setTimeout","removeEventListener","isMetaMask","message","console","error","Error","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,sBAAT,GAAkG;AAAA,iFAAJ,EAAI;AAAA,iCAAhEC,cAAgE;AAAA,MAAhEA,cAAgE,oCAA/C,KAA+C;AAAA,yBAAxCC,MAAwC;AAAA,MAAxCA,MAAwC,4BAA/B,KAA+B;AAAA,0BAAxBC,OAAwB;AAAA,MAAxBA,OAAwB,6BAAd,IAAc;;AAC9FC,EAAAA,eAAe;;AACf,MAAIC,OAAO,GAAG,KAAd;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACjBC,MAAAA,cAAc;AACjB,KAFD,MAGK;AACDF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,sBAAxB,EAAgDD,cAAhD,EAAgE;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAhE;AACAC,MAAAA,UAAU,CAAC,YAAM;AACbH,QAAAA,cAAc;AACjB,OAFS,EAEPP,OAFO,CAAV;AAGH;;AACD,aAASO,cAAT,GAA0B;AACtB,UAAIL,OAAJ,EAAa;AACT;AACH;;AACDA,MAAAA,OAAO,GAAG,IAAV;AACAG,MAAAA,MAAM,CAACM,mBAAP,CAA2B,sBAA3B,EAAmDJ,cAAnD;AACA,oBAAqBF,MAArB;AAAA,UAAQC,QAAR,WAAQA,QAAR;;AACA,UAAIA,QAAQ,KAAK,CAACR,cAAD,IAAmBQ,QAAQ,CAACM,UAAjC,CAAZ,EAA0D;AACtDR,QAAAA,OAAO,CAACE,QAAD,CAAP;AACH,OAFD,MAGK;AACD,YAAMO,OAAO,GAAGf,cAAc,IAAIQ,QAAlB,GACV,wCADU,GAEV,mCAFN;AAGA,SAACP,MAAD,IAAWe,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CF,OAA5C,CAAX;AACAT,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ;AACJ,GA5BM,CAAP;;AA6BA,WAASH,eAAT,GAA2B;AACvB,QAAI,OAAOH,cAAP,KAA0B,SAA9B,EAAyC;AACrC,YAAM,IAAIkB,KAAJ,gFAAN;AACH;;AACD,QAAI,OAAOjB,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,YAAM,IAAIiB,KAAJ,wEAAN;AACH;;AACD,QAAI,OAAOhB,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,YAAM,IAAIgB,KAAJ,wEAAN;AACH;AACJ;AACJ;;AACDC,MAAM,CAACC,OAAP,GAAiBrB,sBAAjB","sourcesContent":["\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {\n    _validateInputs();\n    let handled = false;\n    return new Promise((resolve) => {\n        if (window.ethereum) {\n            handleEthereum();\n        }\n        else {\n            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });\n            setTimeout(() => {\n                handleEthereum();\n            }, timeout);\n        }\n        function handleEthereum() {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            window.removeEventListener('ethereum#initialized', handleEthereum);\n            const { ethereum } = window;\n            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n                resolve(ethereum);\n            }\n            else {\n                const message = mustBeMetaMask && ethereum\n                    ? 'Non-MetaMask window.ethereum detected.'\n                    : 'Unable to detect window.ethereum.';\n                !silent && console.error('@metamask/detect-provider:', message);\n                resolve(null);\n            }\n        }\n    });\n    function _validateInputs() {\n        if (typeof mustBeMetaMask !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n        }\n        if (typeof silent !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n        }\n        if (typeof timeout !== 'number') {\n            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n        }\n    }\n}\nmodule.exports = detectEthereumProvider;\n"]},"metadata":{},"sourceType":"script"}