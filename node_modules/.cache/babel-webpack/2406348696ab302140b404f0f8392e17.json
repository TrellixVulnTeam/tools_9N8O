{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n\n  var _super = _createSuper(LogDescription);\n\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n\n    return _super.apply(this, arguments);\n  }\n\n  return LogDescription;\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n\n  var _super2 = _createSuper(TransactionDescription);\n\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return TransactionDescription;\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description3) {\n  _inherits(Indexed, _Description3);\n\n  var _super3 = _createSuper(Indexed);\n\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n\n  return Indexed;\n}(Description);\n\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n\n    _classCallCheck(this, Interface);\n\n    logger.checkNew(this instanceof Interface ? this.constructor : void 0, Interface);\n    var abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n\n        default:\n          return;\n      }\n\n      var signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      }); // We need to re-bundle the JSON fragments a bit\n\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n\n      return abi;\n    } // Sub-classes can override these to handle other blockchains\n\n  }, {\n    key: \"getFunction\",\n    value: // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n\n        return this.functions[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n\n      return result;\n    } // Find an event definition by any means necessary (unless it is ambiguous)\n\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name2;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n\n        return this.events[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n\n      return result;\n    } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(functionFragment) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    } // Decode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    } // Encode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    } // Decode the result from a function call (e.g. from eth_call)\n\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n      var reason = null;\n      var errorSignature = null;\n\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n\n          break;\n\n        case 4:\n          if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            errorSignature = \"Error(string)\";\n            reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n          }\n\n          break;\n      }\n\n      return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        errorSignature: errorSignature,\n        errorArgs: [reason],\n        reason: reason\n      });\n    } // Encode the result for a function call (e.g. for eth_call)\n\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n\n      var topics = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        } // Check addresses are valid\n\n\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n\n        return hexZeroPad(hexlify(value), 32);\n      };\n\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n\n          return;\n        }\n\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      }); // Trim off trailing nulls\n\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TOOD\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    } // Decode a filter for the event and the search criteria\n\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n\n        topics = topics.slice(1);\n      }\n\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n      var result = [];\n      var nonIndexedIndex = 0,\n          indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        } // Add the keyword argument if named and safe\n\n\n        if (param.name && result[param.name] == null) {\n          var value = result[index]; // Make error named values throw on access\n\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      }); // Make all error indexed values throw on access\n\n      var _loop = function _loop(i) {\n        var value = result[i];\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n\n      return Object.freeze(result);\n    } // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n      if (!fragment) {\n        return null;\n      }\n\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    } // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n\n      if (!fragment || fragment.anonymous) {\n        return null;\n      } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(functionFragment) {\n      return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n\n  return Interface;\n}();","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethersproject/abi/lib.esm/interface.js"],"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","Indexed","value","_isIndexed","wrapAccessError","property","error","wrap","Error","Interface","fragments","checkNew","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","signature","format","payable","full","sighash","throwArgumentError","json","stringify","j","nameOrSignatureOrSighash","name","getSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","functionFragment","getFunction","constructor","eventFragment","getEvent","params","data","_abiCoder","decode","values","encode","_encodeParams","inputs","bytes","slice","_decodeParams","reason","errorSignature","_getWordSize","outputs","throwError","errors","CALL_EXCEPTION","method","errorArgs","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","index","indexed","baseType","Array","isArray","pop","dataTypes","dataValues","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","get","i","freeze","tx","substring","args","log","topic","decodeEventLog","address","_isInterface"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}