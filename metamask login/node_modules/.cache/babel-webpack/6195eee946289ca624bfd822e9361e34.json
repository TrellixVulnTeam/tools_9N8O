{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n\nvar Transaction = function (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n\n        var chainIdDoubled = _this.common.chainIdBN().muln(2); // v and chain ID meet EIP-155 conditions\n\n\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    } // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n\n\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For an unsigned legacy tx this method returns the the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned legacy tx this method uses the empty Buffer values\n   * for the signature parameters `v`, `r` and `s` for encoding. For an\n   * EIP-155 compliant representation use {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data];\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push(ethereumjs_util_1.toBuffer(this.common.chainIdBN()));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n    }\n\n    return values;\n  };\n\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return ethereumjs_util_1.rlphash(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  Transaction.prototype.hash = function () {\n    return ethereumjs_util_1.rlphash(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var message = this._getMessageToSign();\n\n    return ethereumjs_util_1.rlphash(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v, ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n\n    var opts = {\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v, common) {\n    var chainIdBN; // No unsigned tx and EIP-155 activated and chain ID included\n\n    if (v !== undefined && !v.eqn(0) && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \" + v.toString() + \" and chain id \" + common.chainIdBN().toString() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = Transaction;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","defineProperty","exports","ethereumjs_util_1","require","types_1","baseTransaction_1","TRANSACTION_TYPE","Transaction","_super","txData","opts","_a","_this","type","common","_validateTxV","v","gasPrice","BN","toBuffer","_validateCannotExceedMaxInteger","gteHardfork","isSigned","activeCapabilities","Capability","EIP155ReplayProtection","chainIdDoubled","chainIdBN","muln","eq","addn","freeze","fromTxData","fromSerializedTx","serialized","values","rlp","decode","isArray","Error","fromValuesArray","fromRlpSerializedTx","nonce","gasLimit","to","data","raw","bnToUnpaddedBuffer","undefined","buf","Buffer","from","serialize","encode","_getMessageToSign","supports","unpadBuffer","getMessageToSign","hashMessage","message","rlphash","getUpfrontCost","mul","add","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","gt","N_DIV_2","_b","ecrecover","_processSignature","vBN","iadd","toJSON","bnToHex","toString","eqn","isValidEIP155V","numSub","subn","isEven","divn","_getCommon","_unsignedTxImplementsEIP155","_signedTxImplementsEIP155","onEIP155BlockOrLater","vAndChainIdMeetEIP155Conditions","BaseTransaction","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */ (function (_super) {\n    __extends(Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        _this.common = _this._validateTxV(_this.v, opts.common);\n        _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\n        if (_this.common.gteHardfork('spuriousDragon')) {\n            if (!_this.isSigned()) {\n                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                var v = _this.v;\n                var chainIdDoubled = _this.common.chainIdBN().muln(2);\n                // v and chain ID meet EIP-155 conditions\n                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n                    _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link Transaction.fromSerializedTx})\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link Transaction.fromSerializedTx} constructor\n     */\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        return new Transaction({\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            v: v,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For an unsigned legacy tx this method returns the the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\n            this.data,\n            this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n            this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n            this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned legacy tx this method uses the empty Buffer values\n     * for the signature parameters `v`, `r` and `s` for encoding. For an\n     * EIP-155 compliant representation use {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    Transaction.prototype._getMessageToSign = function () {\n        var values = [\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push(ethereumjs_util_1.toBuffer(this.common.chainIdBN()));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n        }\n        return values;\n    };\n    Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var message = this._getMessageToSign();\n        if (hashMessage) {\n            return ethereumjs_util_1.rlphash(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    Transaction.prototype.hash = function () {\n        return ethereumjs_util_1.rlphash(this.raw());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        if (!this.isSigned()) {\n            throw Error('This transaction is not signed');\n        }\n        var message = this._getMessageToSign();\n        return ethereumjs_util_1.rlphash(message);\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return ethereumjs_util_1.ecrecover(msgHash, v, ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n        }\n        catch (e) {\n            throw new Error('Invalid Signature');\n        }\n    };\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    Transaction.prototype._processSignature = function (v, r, s) {\n        var vBN = new ethereumjs_util_1.BN(v);\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n        }\n        var opts = {\n            common: this.common,\n        };\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: vBN,\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\n            gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: ethereumjs_util_1.bnToHex(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\n        };\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v, common) {\n        var chainIdBN;\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            !v.eqn(0) &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            !v.eqn(27) &&\n            !v.eqn(28)) {\n            if (common) {\n                var chainIdDoubled = common.chainIdBN().muln(2);\n                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n                if (!isValidEIP155V) {\n                    throw new Error(\"Incompatible EIP155-based V \" + v.toString() + \" and chain id \" + common\n                        .chainIdBN()\n                        .toString() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n                }\n            }\n            else {\n                // Derive the original chain ID\n                var numSub = void 0;\n                if (v.subn(35).isEven()) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBN = v.subn(numSub).divn(2);\n            }\n        }\n        return this._getCommon(common, chainIdBN);\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        if (!this.isSigned()) {\n            throw Error('This transaction is not signed');\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = this.v;\n        var chainIdDoubled = this.common.chainIdBN().muln(2);\n        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    return Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = Transaction;\n"]},"metadata":{},"sourceType":"script"}