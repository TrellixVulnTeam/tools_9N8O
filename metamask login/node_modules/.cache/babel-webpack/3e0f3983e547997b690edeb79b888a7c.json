{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\n\n\nfunction bnToHex(value) {\n  return \"0x\" + value.toString(16);\n}\n\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bnToUnpaddedBuffer(value) {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\n\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\n\nfunction bnToRlp(value) {\n  return bnToUnpaddedBuffer(value);\n}\n\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\n\nvar TypeOutput;\n\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n  TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n/**\n * Convert an input to a specified type\n * @param input value to convert\n * @param outputType type to output\n */\n\n\nfunction toType(input, outputType) {\n  if (typeof input === 'string' && !ethjs_util_1.isHexString(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \" + input);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n\n  input = bytes_1.toBuffer(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return input;\n  } else if (outputType === TypeOutput.BN) {\n    return new bn_js_1.default(input);\n  } else if (outputType === TypeOutput.Number) {\n    var bn = new bn_js_1.default(input);\n    var max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());\n\n    if (bn.gt(max)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n    }\n\n    return bn.toNumber();\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return \"0x\" + input.toString('hex');\n  }\n}\n\nexports.toType = toType;","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/ethereumjs-util/dist.browser/types.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","toType","TypeOutput","bnToRlp","bnToUnpaddedBuffer","bnToHex","bn_js_1","require","ethjs_util_1","bytes_1","toString","unpadBuffer","toArrayLike","Buffer","input","outputType","isHexString","Error","Number","isSafeInteger","toBuffer","BN","default","bn","max","MAX_SAFE_INTEGER","gt","toNumber"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,OAAR,GAAkBJ,OAAO,CAACK,kBAAR,GAA6BL,OAAO,CAACM,OAAR,GAAkB,KAAK,CAA5G;;AACA,IAAIC,OAAO,GAAGZ,eAAe,CAACa,OAAO,CAAC,OAAD,CAAR,CAA7B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;AACA;AACA;AACA;;;AACA,SAASF,OAAT,CAAiBL,KAAjB,EAAwB;AACpB,SAAO,OAAOA,KAAK,CAACU,QAAN,CAAe,EAAf,CAAd;AACH;;AACDX,OAAO,CAACM,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,kBAAT,CAA4BJ,KAA5B,EAAmC;AAC/B;AACA;AACA,SAAOS,OAAO,CAACE,WAAR,CAAoBX,KAAK,CAACY,WAAN,CAAkBC,MAAlB,CAApB,CAAP;AACH;;AACDd,OAAO,CAACK,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;;AACA,SAASD,OAAT,CAAiBH,KAAjB,EAAwB;AACpB,SAAOI,kBAAkB,CAACJ,KAAD,CAAzB;AACH;;AACDD,OAAO,CAACI,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;;AACA,IAAID,UAAJ;;AACA,CAAC,UAAUA,UAAV,EAAsB;AACnBA,EAAAA,UAAU,CAACA,UAAU,CAAC,QAAD,CAAV,GAAuB,CAAxB,CAAV,GAAuC,QAAvC;AACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,IAAD,CAAV,GAAmB,CAApB,CAAV,GAAmC,IAAnC;AACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,QAAD,CAAV,GAAuB,CAAxB,CAAV,GAAuC,QAAvC;AACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,mBAAD,CAAV,GAAkC,CAAnC,CAAV,GAAkD,mBAAlD;AACH,CALD,EAKGA,UAAU,GAAGH,OAAO,CAACG,UAAR,KAAuBH,OAAO,CAACG,UAAR,GAAqB,EAA5C,CALhB;AAMA;AACA;AACA;AACA;AACA;;;AACA,SAASD,MAAT,CAAgBa,KAAhB,EAAuBC,UAAvB,EAAmC;AAC/B,MAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAACN,YAAY,CAACQ,WAAb,CAAyBF,KAAzB,CAAlC,EAAmE;AAC/D,UAAM,IAAIG,KAAJ,CAAU,wDAAwDH,KAAlE,CAAN;AACH,GAFD,MAGK,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACI,MAAM,CAACC,aAAP,CAAqBL,KAArB,CAAlC,EAA+D;AAChE,UAAM,IAAIG,KAAJ,CAAU,6FAAV,CAAN;AACH;;AACDH,EAAAA,KAAK,GAAGL,OAAO,CAACW,QAAR,CAAiBN,KAAjB,CAAR;;AACA,MAAIC,UAAU,KAAKb,UAAU,CAACW,MAA9B,EAAsC;AAClC,WAAOC,KAAP;AACH,GAFD,MAGK,IAAIC,UAAU,KAAKb,UAAU,CAACmB,EAA9B,EAAkC;AACnC,WAAO,IAAIf,OAAO,CAACgB,OAAZ,CAAoBR,KAApB,CAAP;AACH,GAFI,MAGA,IAAIC,UAAU,KAAKb,UAAU,CAACgB,MAA9B,EAAsC;AACvC,QAAIK,EAAE,GAAG,IAAIjB,OAAO,CAACgB,OAAZ,CAAoBR,KAApB,CAAT;AACA,QAAIU,GAAG,GAAG,IAAIlB,OAAO,CAACgB,OAAZ,CAAoBJ,MAAM,CAACO,gBAAP,CAAwBf,QAAxB,EAApB,CAAV;;AACA,QAAIa,EAAE,CAACG,EAAH,CAAMF,GAAN,CAAJ,EAAgB;AACZ,YAAM,IAAIP,KAAJ,CAAU,8FAAV,CAAN;AACH;;AACD,WAAOM,EAAE,CAACI,QAAH,EAAP;AACH,GAPI,MAQA;AACD;AACA,WAAO,OAAOb,KAAK,CAACJ,QAAN,CAAe,KAAf,CAAd;AACH;AACJ;;AACDX,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar ethjs_util_1 = require(\"ethjs-util\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nfunction bnToHex(value) {\n    return \"0x\" + value.toString(16);\n}\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bnToUnpaddedBuffer(value) {\n    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n    // for compatibility with browserify and similar tools\n    return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\nfunction bnToRlp(value) {\n    return bnToUnpaddedBuffer(value);\n}\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n/**\n * Convert an input to a specified type\n * @param input value to convert\n * @param outputType type to output\n */\nfunction toType(input, outputType) {\n    if (typeof input === 'string' && !ethjs_util_1.isHexString(input)) {\n        throw new Error(\"A string must be provided with a 0x-prefix, given: \" + input);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    input = bytes_1.toBuffer(input);\n    if (outputType === TypeOutput.Buffer) {\n        return input;\n    }\n    else if (outputType === TypeOutput.BN) {\n        return new bn_js_1.default(input);\n    }\n    else if (outputType === TypeOutput.Number) {\n        var bn = new bn_js_1.default(input);\n        var max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());\n        if (bn.gt(max)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return bn.toNumber();\n    }\n    else {\n        // outputType === TypeOutput.PrefixedHexString\n        return \"0x\" + input.toString('hex');\n    }\n}\nexports.toType = toType;\n"]},"metadata":{},"sourceType":"script"}