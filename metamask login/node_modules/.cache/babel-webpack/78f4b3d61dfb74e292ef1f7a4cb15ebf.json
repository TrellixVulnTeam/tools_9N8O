{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = secp256k1_1.ecdsaSign(msgHash, privateKey),\n      signature = _a.signature,\n      recovery = _a.recid;\n\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n\n  var chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\n\nexports.ecsign = ecsign;\n\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = types_1.toType(v, types_1.TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n\n  var chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  var rec = new bn_js_1.default(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);\n  return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\n\n\nexports.toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * @returns Signature\n */\n\n\nexports.toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var vn = types_1.toType(v, types_1.TypeOutput.Number);\n  var ss = s;\n\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n\n  return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(ss, 32)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\n\n\nexports.fromRpcSig = function (sig) {\n  var buf = bytes_1.toBuffer(sig);\n  var r;\n  var s;\n  var v;\n\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bytes_1.bufferToInt(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = bytes_1.bufferToInt(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  } // support both versions of `eth_sign` responses\n\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\n\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new bn_js_1.default(r);\n  var sBN = new bn_js_1.default(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  helpers_1.assertIsBuffer(message);\n  var prefix = Buffer.from(\"\\x19Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n  return hash_1.keccak(Buffer.concat([prefix, message]));\n};","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/ethereumjs-util/dist.browser/signature.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","hashPersonalMessage","isValidSignature","fromRpcSig","toCompactSig","toRpcSig","ecrecover","ecsign","secp256k1_1","require","bn_js_1","bytes_1","hash_1","helpers_1","types_1","msgHash","privateKey","chainId","_a","ecdsaSign","signature","recovery","recid","r","Buffer","from","slice","s","Number","isSafeInteger","Error","v_1","v","chainIdBN","toType","TypeOutput","BN","muln","addn","toArrayLike","calculateSigRecovery","vBN","subn","sub","isValidSigRecovery","rec","default","eqn","concat","setLengthLeft","senderPubKey","ecdsaRecover","toNumber","publicKeyConvert","bufferToHex","toBuffer","vn","ss","sig","buf","length","bufferToInt","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","message","assertIsBuffer","prefix","toString","keccak"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,UAAR,GAAqBJ,OAAO,CAACK,YAAR,GAAuBL,OAAO,CAACM,QAAR,GAAmBN,OAAO,CAACO,SAAR,GAAoBP,OAAO,CAACQ,MAAR,GAAiB,KAAK,CAAlK;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,iCAAD,CAAzB;;AACA,IAAIC,OAAO,GAAGhB,eAAe,CAACe,OAAO,CAAC,OAAD,CAAR,CAA7B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAApB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAArB;;AACA,SAASF,MAAT,CAAgBQ,OAAhB,EAAyBC,UAAzB,EAAqCC,OAArC,EAA8C;AAC1C,MAAIC,EAAE,GAAGV,WAAW,CAACW,SAAZ,CAAsBJ,OAAtB,EAA+BC,UAA/B,CAAT;AAAA,MAAqDI,SAAS,GAAGF,EAAE,CAACE,SAApE;AAAA,MAA+EC,QAAQ,GAAGH,EAAE,CAACI,KAA7F;;AACA,MAAIC,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYL,SAAS,CAACM,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAZ,CAAR;AACA,MAAIC,CAAC,GAAGH,MAAM,CAACC,IAAP,CAAYL,SAAS,CAACM,KAAV,CAAgB,EAAhB,EAAoB,EAApB,CAAZ,CAAR;;AACA,MAAI,CAACT,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AACzC;AACA,QAAIA,OAAO,IAAI,CAACW,MAAM,CAACC,aAAP,CAAqBZ,OAArB,CAAhB,EAA+C;AAC3C,YAAM,IAAIa,KAAJ,CAAU,6FAAV,CAAN;AACH;;AACD,QAAIC,GAAG,GAAGd,OAAO,GAAGI,QAAQ,IAAIJ,OAAO,GAAG,CAAV,GAAc,EAAlB,CAAX,GAAmCI,QAAQ,GAAG,EAA/D;AACA,WAAO;AAAEE,MAAAA,CAAC,EAAEA,CAAL;AAAQI,MAAAA,CAAC,EAAEA,CAAX;AAAcK,MAAAA,CAAC,EAAED;AAAjB,KAAP;AACH;;AACD,MAAIE,SAAS,GAAGnB,OAAO,CAACoB,MAAR,CAAejB,OAAf,EAAwBH,OAAO,CAACqB,UAAR,CAAmBC,EAA3C,CAAhB;AACA,MAAIJ,CAAC,GAAGC,SAAS,CAACI,IAAV,CAAe,CAAf,EAAkBC,IAAlB,CAAuB,EAAvB,EAA2BA,IAA3B,CAAgCjB,QAAhC,EAA0CkB,WAA1C,CAAsDf,MAAtD,CAAR;AACA,SAAO;AAAED,IAAAA,CAAC,EAAEA,CAAL;AAAQI,IAAAA,CAAC,EAAEA,CAAX;AAAcK,IAAAA,CAAC,EAAEA;AAAjB,GAAP;AACH;;AACDjC,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;;AACA,SAASiC,oBAAT,CAA8BR,CAA9B,EAAiCf,OAAjC,EAA0C;AACtC,MAAIwB,GAAG,GAAG3B,OAAO,CAACoB,MAAR,CAAeF,CAAf,EAAkBlB,OAAO,CAACqB,UAAR,CAAmBC,EAArC,CAAV;;AACA,MAAI,CAACnB,OAAL,EAAc;AACV,WAAOwB,GAAG,CAACC,IAAJ,CAAS,EAAT,CAAP;AACH;;AACD,MAAIT,SAAS,GAAGnB,OAAO,CAACoB,MAAR,CAAejB,OAAf,EAAwBH,OAAO,CAACqB,UAAR,CAAmBC,EAA3C,CAAhB;AACA,SAAOK,GAAG,CAACE,GAAJ,CAAQV,SAAS,CAACI,IAAV,CAAe,CAAf,EAAkBC,IAAlB,CAAuB,EAAvB,CAAR,CAAP;AACH;;AACD,SAASM,kBAAT,CAA4BvB,QAA5B,EAAsC;AAClC,MAAIwB,GAAG,GAAG,IAAInC,OAAO,CAACoC,OAAZ,CAAoBzB,QAApB,CAAV;AACA,SAAOwB,GAAG,CAACE,GAAJ,CAAQ,CAAR,KAAcF,GAAG,CAACE,GAAJ,CAAQ,CAAR,CAArB;AACH;AACD;AACA;AACA;AACA;;;AACAhD,OAAO,CAACO,SAAR,GAAoB,UAAUS,OAAV,EAAmBiB,CAAnB,EAAsBT,CAAtB,EAAyBI,CAAzB,EAA4BV,OAA5B,EAAqC;AACrD,MAAIG,SAAS,GAAGI,MAAM,CAACwB,MAAP,CAAc,CAACrC,OAAO,CAACsC,aAAR,CAAsB1B,CAAtB,EAAyB,EAAzB,CAAD,EAA+BZ,OAAO,CAACsC,aAAR,CAAsBtB,CAAtB,EAAyB,EAAzB,CAA/B,CAAd,EAA4E,EAA5E,CAAhB;AACA,MAAIN,QAAQ,GAAGmB,oBAAoB,CAACR,CAAD,EAAIf,OAAJ,CAAnC;;AACA,MAAI,CAAC2B,kBAAkB,CAACvB,QAAD,CAAvB,EAAmC;AAC/B,UAAM,IAAIS,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,MAAIoB,YAAY,GAAG1C,WAAW,CAAC2C,YAAZ,CAAyB/B,SAAzB,EAAoCC,QAAQ,CAAC+B,QAAT,EAApC,EAAyDrC,OAAzD,CAAnB;AACA,SAAOS,MAAM,CAACC,IAAP,CAAYjB,WAAW,CAAC6C,gBAAZ,CAA6BH,YAA7B,EAA2C,KAA3C,EAAkDxB,KAAlD,CAAwD,CAAxD,CAAZ,CAAP;AACH,CARD;AASA;AACA;AACA;AACA;;;AACA3B,OAAO,CAACM,QAAR,GAAmB,UAAU2B,CAAV,EAAaT,CAAb,EAAgBI,CAAhB,EAAmBV,OAAnB,EAA4B;AAC3C,MAAII,QAAQ,GAAGmB,oBAAoB,CAACR,CAAD,EAAIf,OAAJ,CAAnC;;AACA,MAAI,CAAC2B,kBAAkB,CAACvB,QAAD,CAAvB,EAAmC;AAC/B,UAAM,IAAIS,KAAJ,CAAU,2BAAV,CAAN;AACH,GAJ0C,CAK3C;;;AACA,SAAOnB,OAAO,CAAC2C,WAAR,CAAoB9B,MAAM,CAACwB,MAAP,CAAc,CAACrC,OAAO,CAACsC,aAAR,CAAsB1B,CAAtB,EAAyB,EAAzB,CAAD,EAA+BZ,OAAO,CAACsC,aAAR,CAAsBtB,CAAtB,EAAyB,EAAzB,CAA/B,EAA6DhB,OAAO,CAAC4C,QAAR,CAAiBvB,CAAjB,CAA7D,CAAd,CAApB,CAAP;AACH,CAPD;AAQA;AACA;AACA;AACA;;;AACAjC,OAAO,CAACK,YAAR,GAAuB,UAAU4B,CAAV,EAAaT,CAAb,EAAgBI,CAAhB,EAAmBV,OAAnB,EAA4B;AAC/C,MAAII,QAAQ,GAAGmB,oBAAoB,CAACR,CAAD,EAAIf,OAAJ,CAAnC;;AACA,MAAI,CAAC2B,kBAAkB,CAACvB,QAAD,CAAvB,EAAmC;AAC/B,UAAM,IAAIS,KAAJ,CAAU,2BAAV,CAAN;AACH;;AACD,MAAI0B,EAAE,GAAG1C,OAAO,CAACoB,MAAR,CAAeF,CAAf,EAAkBlB,OAAO,CAACqB,UAAR,CAAmBP,MAArC,CAAT;AACA,MAAI6B,EAAE,GAAG9B,CAAT;;AACA,MAAK6B,EAAE,GAAG,EAAL,IAAWA,EAAE,GAAG,CAAL,KAAW,CAAvB,IAA6BA,EAAE,KAAK,CAApC,IAAyCA,EAAE,KAAK,EAApD,EAAwD;AACpDC,IAAAA,EAAE,GAAGjC,MAAM,CAACC,IAAP,CAAYE,CAAZ,CAAL;AACA8B,IAAAA,EAAE,CAAC,CAAD,CAAF,IAAS,IAAT;AACH;;AACD,SAAO9C,OAAO,CAAC2C,WAAR,CAAoB9B,MAAM,CAACwB,MAAP,CAAc,CAACrC,OAAO,CAACsC,aAAR,CAAsB1B,CAAtB,EAAyB,EAAzB,CAAD,EAA+BZ,OAAO,CAACsC,aAAR,CAAsBQ,EAAtB,EAA0B,EAA1B,CAA/B,CAAd,CAApB,CAAP;AACH,CAZD;AAaA;AACA;AACA;AACA;;;AACA1D,OAAO,CAACI,UAAR,GAAqB,UAAUuD,GAAV,EAAe;AAChC,MAAIC,GAAG,GAAGhD,OAAO,CAAC4C,QAAR,CAAiBG,GAAjB,CAAV;AACA,MAAInC,CAAJ;AACA,MAAII,CAAJ;AACA,MAAIK,CAAJ;;AACA,MAAI2B,GAAG,CAACC,MAAJ,IAAc,EAAlB,EAAsB;AAClBrC,IAAAA,CAAC,GAAGoC,GAAG,CAACjC,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAJ;AACAC,IAAAA,CAAC,GAAGgC,GAAG,CAACjC,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAJ;AACAM,IAAAA,CAAC,GAAGrB,OAAO,CAACkD,WAAR,CAAoBF,GAAG,CAACjC,KAAJ,CAAU,EAAV,CAApB,CAAJ;AACH,GAJD,MAKK,IAAIiC,GAAG,CAACC,MAAJ,KAAe,EAAnB,EAAuB;AACxB;AACArC,IAAAA,CAAC,GAAGoC,GAAG,CAACjC,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAJ;AACAC,IAAAA,CAAC,GAAGgC,GAAG,CAACjC,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAJ;AACAM,IAAAA,CAAC,GAAGrB,OAAO,CAACkD,WAAR,CAAoBF,GAAG,CAACjC,KAAJ,CAAU,EAAV,EAAc,EAAd,CAApB,KAA0C,CAA9C;AACAC,IAAAA,CAAC,CAAC,CAAD,CAAD,IAAQ,IAAR;AACH,GANI,MAOA;AACD,UAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AACH,GAnB+B,CAoBhC;;;AACA,MAAIE,CAAC,GAAG,EAAR,EAAY;AACRA,IAAAA,CAAC,IAAI,EAAL;AACH;;AACD,SAAO;AACHA,IAAAA,CAAC,EAAEA,CADA;AAEHT,IAAAA,CAAC,EAAEA,CAFA;AAGHI,IAAAA,CAAC,EAAEA;AAHA,GAAP;AAKH,CA7BD;AA8BA;AACA;AACA;AACA;;;AACA5B,OAAO,CAACG,gBAAR,GAA2B,UAAU8B,CAAV,EAAaT,CAAb,EAAgBI,CAAhB,EAAmBmC,gBAAnB,EAAqC7C,OAArC,EAA8C;AACrE,MAAI6C,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAC7D,MAAIC,iBAAiB,GAAG,IAAIrD,OAAO,CAACoC,OAAZ,CAAoB,kEAApB,EAAwF,EAAxF,CAAxB;AACA,MAAIkB,WAAW,GAAG,IAAItD,OAAO,CAACoC,OAAZ,CAAoB,kEAApB,EAAwF,EAAxF,CAAlB;;AACA,MAAIvB,CAAC,CAACqC,MAAF,KAAa,EAAb,IAAmBjC,CAAC,CAACiC,MAAF,KAAa,EAApC,EAAwC;AACpC,WAAO,KAAP;AACH;;AACD,MAAI,CAAChB,kBAAkB,CAACJ,oBAAoB,CAACR,CAAD,EAAIf,OAAJ,CAArB,CAAvB,EAA2D;AACvD,WAAO,KAAP;AACH;;AACD,MAAIgD,GAAG,GAAG,IAAIvD,OAAO,CAACoC,OAAZ,CAAoBvB,CAApB,CAAV;AACA,MAAI2C,GAAG,GAAG,IAAIxD,OAAO,CAACoC,OAAZ,CAAoBnB,CAApB,CAAV;;AACA,MAAIsC,GAAG,CAACE,MAAJ,MAAgBF,GAAG,CAACG,EAAJ,CAAOJ,WAAP,CAAhB,IAAuCE,GAAG,CAACC,MAAJ,EAAvC,IAAuDD,GAAG,CAACE,EAAJ,CAAOJ,WAAP,CAA3D,EAAgF;AAC5E,WAAO,KAAP;AACH;;AACD,MAAIF,gBAAgB,IAAII,GAAG,CAACG,GAAJ,CAAQN,iBAAR,MAA+B,CAAvD,EAA0D;AACtD,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CAnBD;AAoBA;AACA;AACA;AACA;AACA;AACA;;;AACAhE,OAAO,CAACE,mBAAR,GAA8B,UAAUqE,OAAV,EAAmB;AAC7CzD,EAAAA,SAAS,CAAC0D,cAAV,CAAyBD,OAAzB;AACA,MAAIE,MAAM,GAAGhD,MAAM,CAACC,IAAP,CAAY,mCAAqC6C,OAAO,CAACV,MAAR,CAAea,QAAf,EAAjD,EAA4E,OAA5E,CAAb;AACA,SAAO7D,MAAM,CAAC8D,MAAP,CAAclD,MAAM,CAACwB,MAAP,CAAc,CAACwB,MAAD,EAASF,OAAT,CAAd,CAAd,CAAP;AACH,CAJD","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n    var _a = secp256k1_1.ecdsaSign(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;\n    var r = Buffer.from(signature.slice(0, 32));\n    var s = Buffer.from(signature.slice(32, 64));\n    if (!chainId || typeof chainId === 'number') {\n        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n        if (chainId && !Number.isSafeInteger(chainId)) {\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n        }\n        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n        return { r: r, s: s, v: v_1 };\n    }\n    var chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n    var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n    return { r: r, s: s, v: v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    var vBN = types_1.toType(v, types_1.TypeOutput.BN);\n    if (!chainId) {\n        return vBN.subn(27);\n    }\n    var chainIdBN = types_1.toType(chainId, types_1.TypeOutput.BN);\n    return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n    var rec = new bn_js_1.default(recovery);\n    return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = secp256k1_1.ecdsaRecover(signature, recovery.toNumber(), msgHash);\n    return Buffer.from(secp256k1_1.publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * @returns Signature\n */\nexports.toCompactSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var vn = types_1.toType(v, types_1.TypeOutput.Number);\n    var ss = s;\n    if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(ss, 32)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    var r;\n    var s;\n    var v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = bytes_1.bufferToInt(buf.slice(64));\n    }\n    else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = bytes_1.bufferToInt(buf.slice(32, 33)) >> 7;\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: r,\n        s: s,\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new bn_js_1.default('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new bn_js_1.default('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new bn_js_1.default(r);\n    var sBN = new bn_js_1.default(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    helpers_1.assertIsBuffer(message);\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\n"]},"metadata":{},"sourceType":"script"}