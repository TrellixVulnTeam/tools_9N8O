{"ast":null,"code":"\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _classCallCheck from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cynefin/Desktop/Angular Basics/blog/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n} // Only warn about passing 10 into radix once\n\nvar _warnedToStringRadix = false;\nexport var BigNumber = /*#__PURE__*/function () {\n  function BigNumber(constructorGuard, hex) {\n    _classCallCheck(this, BigNumber);\n\n    logger.checkNew(this instanceof BigNumber ? this.constructor : void 0, BigNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  _createClass(BigNumber, [{\n    key: \"fromTwos\",\n    value: function fromTwos(value) {\n      return toBigNumber(toBN(this).fromTwos(value));\n    }\n  }, {\n    key: \"toTwos\",\n    value: function toTwos(value) {\n      return toBigNumber(toBN(this).toTwos(value));\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      if (this._hex[0] === \"-\") {\n        return BigNumber.from(this._hex.substring(1));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return toBigNumber(toBN(this).add(toBN(other)));\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n  }, {\n    key: \"div\",\n    value: function div(other) {\n      var o = BigNumber.from(other);\n\n      if (o.isZero()) {\n        throwFault(\"division by zero\", \"div\");\n      }\n\n      return toBigNumber(toBN(this).div(toBN(other)));\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(other) {\n      return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(other) {\n      var value = toBN(other);\n\n      if (value.isNeg()) {\n        throwFault(\"cannot modulo negative values\", \"mod\");\n      }\n\n      return toBigNumber(toBN(this).umod(value));\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(other) {\n      var value = toBN(other);\n\n      if (value.isNeg()) {\n        throwFault(\"cannot raise to negative values\", \"pow\");\n      }\n\n      return toBigNumber(toBN(this).pow(value));\n    }\n  }, {\n    key: \"and\",\n    value: function and(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"cannot 'and' negative values\", \"and\");\n      }\n\n      return toBigNumber(toBN(this).and(value));\n    }\n  }, {\n    key: \"or\",\n    value: function or(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"cannot 'or' negative values\", \"or\");\n      }\n\n      return toBigNumber(toBN(this).or(value));\n    }\n  }, {\n    key: \"xor\",\n    value: function xor(other) {\n      var value = toBN(other);\n\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"cannot 'xor' negative values\", \"xor\");\n      }\n\n      return toBigNumber(toBN(this).xor(value));\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"cannot mask negative values\", \"mask\");\n      }\n\n      return toBigNumber(toBN(this).maskn(value));\n    }\n  }, {\n    key: \"shl\",\n    value: function shl(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"cannot shift negative values\", \"shl\");\n      }\n\n      return toBigNumber(toBN(this).shln(value));\n    }\n  }, {\n    key: \"shr\",\n    value: function shr(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"cannot shift negative values\", \"shr\");\n      }\n\n      return toBigNumber(toBN(this).shrn(value));\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return toBN(this).eq(toBN(other));\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return toBN(this).lt(toBN(other));\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      return toBN(this).lte(toBN(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return toBN(this).gt(toBN(other));\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      return toBN(this).gte(toBN(other));\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._hex[0] === \"-\";\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return toBN(this).isZero();\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      try {\n        return toBN(this).toNumber();\n      } catch (error) {\n        throwFault(\"overflow\", \"toNumber\", this.toString());\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      try {\n        return BigInt(this.toString());\n      } catch (e) {}\n\n      return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n        value: this.toString()\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Lots of people expect this, which we do not support, so check (See: #889)\n      if (arguments.length > 0) {\n        if (arguments[0] === 10) {\n          if (!_warnedToStringRadix) {\n            _warnedToStringRadix = true;\n            logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n          }\n        } else if (arguments[0] === 16) {\n          logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        } else {\n          logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n      }\n\n      return toBN(this).toString(10);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this._hex;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(key) {\n      return {\n        type: \"BigNumber\",\n        hex: this.toHexString()\n      };\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof BigNumber) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        if (value.match(/^-?0x[0-9a-f]+$/i)) {\n          return new BigNumber(_constructorGuard, toHex(value));\n        }\n\n        if (value.match(/^-?[0-9]+$/)) {\n          return new BigNumber(_constructorGuard, toHex(new BN(value)));\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n      }\n\n      if (typeof value === \"number\") {\n        if (value % 1) {\n          throwFault(\"underflow\", \"BigNumber.from\", value);\n        }\n\n        if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n          throwFault(\"overflow\", \"BigNumber.from\", value);\n        }\n\n        return BigNumber.from(String(value));\n      }\n\n      var anyValue = value;\n\n      if (typeof anyValue === \"bigint\") {\n        return BigNumber.from(anyValue.toString());\n      }\n\n      if (isBytes(anyValue)) {\n        return BigNumber.from(hexlify(anyValue));\n      }\n\n      if (anyValue) {\n        // Hexable interface (takes piority)\n        if (anyValue.toHexString) {\n          var hex = anyValue.toHexString();\n\n          if (typeof hex === \"string\") {\n            return BigNumber.from(hex);\n          }\n        } else {\n          // For now, handle legacy JSON-ified values (goes away in v6)\n          var _hex = anyValue._hex; // New-form JSON\n\n          if (_hex == null && anyValue.type === \"BigNumber\") {\n            _hex = anyValue.hex;\n          }\n\n          if (typeof _hex === \"string\") {\n            if (isHexString(_hex) || _hex[0] === \"-\" && isHexString(_hex.substring(1))) {\n              return BigNumber.from(_hex);\n            }\n          }\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isBigNumber\",\n    value: function isBigNumber(value) {\n      return !!(value && value._isBigNumber);\n    }\n  }]);\n\n  return BigNumber;\n}(); // Normalize the hex string\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have mulitple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  var hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n} // value should have no prefix\n\n\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n} // value should have no prefix\n\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"],"names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructorGuard","hex","checkNew","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","sub","o","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","key","type","toHexString","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        logger.checkNew(new.target, BigNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division by zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot raise to negative values\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot mask negative values\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes piority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have mulitple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\n"]},"metadata":{},"sourceType":"module"}