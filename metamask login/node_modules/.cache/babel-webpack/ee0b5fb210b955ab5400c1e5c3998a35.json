{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\n\n\nexports.assertIsHexString = function (input) {\n  if (!ethjs_util_1.isHexString(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\n\n\nexports.assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\n\n\nexports.assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\n\n\nexports.assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \" + input;\n    throw new Error(msg);\n  }\n};","map":{"version":3,"sources":["/home/cynefin/Desktop/Angular Basics/blog/node_modules/ethereumjs-util/dist.browser/helpers.js"],"names":["Object","defineProperty","exports","value","assertIsString","assertIsArray","assertIsBuffer","assertIsHexString","ethjs_util_1","require","input","isHexString","msg","Error","Buffer","isBuffer","Array","isArray"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,aAAR,GAAwBH,OAAO,CAACI,cAAR,GAAyBJ,OAAO,CAACK,iBAAR,GAA4B,KAAK,CAA3G;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;;;AACAP,OAAO,CAACK,iBAAR,GAA4B,UAAUG,KAAV,EAAiB;AACzC,MAAI,CAACF,YAAY,CAACG,WAAb,CAAyBD,KAAzB,CAAL,EAAsC;AAClC,QAAIE,GAAG,GAAG,sEAAsEF,KAAhF;AACA,UAAM,IAAIG,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CALD;AAMA;AACA;AACA;AACA;;;AACAV,OAAO,CAACI,cAAR,GAAyB,UAAUI,KAAV,EAAiB;AACtC,MAAI,CAACI,MAAM,CAACC,QAAP,CAAgBL,KAAhB,CAAL,EAA6B;AACzB,QAAIE,GAAG,GAAG,qDAAqDF,KAA/D;AACA,UAAM,IAAIG,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CALD;AAMA;AACA;AACA;AACA;;;AACAV,OAAO,CAACG,aAAR,GAAwB,UAAUK,KAAV,EAAiB;AACrC,MAAI,CAACM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAL,EAA2B;AACvB,QAAIE,GAAG,GAAG,4DAA4DF,KAAtE;AACA,UAAM,IAAIG,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CALD;AAMA;AACA;AACA;AACA;;;AACAV,OAAO,CAACE,cAAR,GAAyB,UAAUM,KAAV,EAAiB;AACtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,QAAIE,GAAG,GAAG,sDAAsDF,KAAhE;AACA,UAAM,IAAIG,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,CALD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nvar ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexports.assertIsHexString = function (input) {\n    if (!ethjs_util_1.isHexString(input)) {\n        var msg = \"This method only supports 0x-prefixed hex strings but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexports.assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        var msg = \"This method only supports Buffer but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexports.assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        var msg = \"This method only supports number arrays but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexports.assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        var msg = \"This method only supports strings but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}