var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getChainId } from '../../helpers';
const ConnectToWalletLink = (WalletLinkProvider, opts) => {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        let infuraUrl = '';
        let appName = "";
        let appLogoUrl = "";
        let darkMode = false;
        let chainId = 1;
        if (opts) {
            appName = opts.appName || appName;
            appLogoUrl = opts.appLogoUrl || appLogoUrl;
            darkMode = opts.darkMode || darkMode;
            infuraUrl = opts.infuraUrl || '';
            chainId = opts.network && getChainId(opts.network) ? getChainId(opts.network) : 1;
        }
        if (!infuraUrl) {
            throw new Error('Missing Infura URL for WalletLink Provider');
        }
        const provider = new WalletLinkProvider({
            appName,
            appLogoUrl,
            darkMode
        }).makeWeb3Provider(infuraUrl, chainId);
        try {
            yield provider.enable();
            resolve(provider);
        }
        catch (e) {
            reject(e);
        }
    }));
};
export default ConnectToWalletLink;
//# sourceMappingURL=walletlink.js.map