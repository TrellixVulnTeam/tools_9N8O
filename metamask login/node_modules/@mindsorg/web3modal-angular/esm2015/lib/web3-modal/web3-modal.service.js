var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventEmitter, Injectable, Optional } from '@angular/core';
import { CONNECT_EVENT, ERROR_EVENT, Web3WalletConnector } from '@mindsorg/web3modal-ts';
import { take } from 'rxjs/operators';
export class Web3ModalService {
    constructor(configOptions) {
        this.shouldOpen = new EventEmitter();
        this.providers = new EventEmitter();
        this.web3WalletConnector = new Web3WalletConnector(configOptions);
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            this.providers.next(this.web3WalletConnector.providers);
            return yield new Promise((resolve, reject) => {
                this.web3WalletConnector.providerController.on(CONNECT_EVENT, provider => {
                    resolve(provider);
                });
                this.web3WalletConnector.providerController.on(ERROR_EVENT, error => {
                    reject(error);
                });
                this.shouldOpen.next(true);
                this.shouldOpen.pipe(take(1)).subscribe({
                    next: (open) => {
                        if (!open) {
                            reject('Dismissed modal');
                        }
                    }
                });
            }).finally(() => {
                this.close();
            });
        });
    }
    setConfiguration(options) {
        this.web3WalletConnector.setConfiguration(options);
    }
    clearCachedProvider() {
        this.web3WalletConnector.providerController.clearCachedProvider();
    }
    setCachedProvider(id) {
        this.web3WalletConnector.providerController.setCachedProvider(id);
    }
    close() {
        this.shouldOpen.next(false);
    }
}
Web3ModalService.decorators = [
    { type: Injectable }
];
Web3ModalService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViMy1tb2RhbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvd2ViM21vZGFsL3NyYy9saWIvd2ViMy1tb2RhbC93ZWIzLW1vZGFsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25FLE9BQU8sRUFDTCxhQUFhLEVBQ2IsV0FBVyxFQUVYLG1CQUFtQixFQUVwQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUd0QyxNQUFNLE9BQU8sZ0JBQWdCO0lBTTNCLFlBQXlCLGFBQTBDO1FBSDVELGVBQVUsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN2RCxjQUFTLEdBQXlDLElBQUksWUFBWSxFQUFFLENBQUM7UUFHMUUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDbkUsQ0FBQztJQUVLLElBQUk7O1lBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBRXZELE9BQU8sTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLEVBQUU7b0JBQ3ZFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDcEIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUU7b0JBQ2xFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBRTFCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztvQkFDdEMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7d0JBQ2IsSUFBSSxDQUFDLElBQUksRUFBRTs0QkFDVCxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQzt5QkFDM0I7b0JBQ0gsQ0FBQztpQkFDRixDQUFDLENBQUE7WUFDSixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtZQUNkLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztLQUFBO0lBRUQsZ0JBQWdCLENBQUMsT0FBbUM7UUFDbEQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxtQkFBbUI7UUFDakIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDcEUsQ0FBQztJQUVELGlCQUFpQixDQUFDLEVBQVU7UUFDMUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDN0IsQ0FBQzs7O1lBbkRGLFVBQVU7Ozs0Q0FPSyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ09OTkVDVF9FVkVOVCxcbiAgRVJST1JfRVZFTlQsXG4gIElQcm92aWRlckNvbnRyb2xsZXJPcHRpb25zLFxuICBXZWIzV2FsbGV0Q29ubmVjdG9yLFxuICBJUHJvdmlkZXJVc2VyT3B0aW9uc1xufSBmcm9tICdAbWluZHNvcmcvd2ViM21vZGFsLXRzJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZWIzTW9kYWxTZXJ2aWNlIHtcbiAgcHJpdmF0ZSB3ZWIzV2FsbGV0Q29ubmVjdG9yOiBXZWIzV2FsbGV0Q29ubmVjdG9yXG5cbiAgcHVibGljIHNob3VsZE9wZW46IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcHVibGljIHByb3ZpZGVyczogRXZlbnRFbWl0dGVyPElQcm92aWRlclVzZXJPcHRpb25zW10+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yIChAT3B0aW9uYWwoKSBjb25maWdPcHRpb25zPzogSVByb3ZpZGVyQ29udHJvbGxlck9wdGlvbnMpIHtcbiAgICB0aGlzLndlYjNXYWxsZXRDb25uZWN0b3IgPSBuZXcgV2ViM1dhbGxldENvbm5lY3Rvcihjb25maWdPcHRpb25zKVxuICB9XG5cbiAgYXN5bmMgb3BlbigpIHtcbiAgICB0aGlzLnByb3ZpZGVycy5uZXh0KHRoaXMud2ViM1dhbGxldENvbm5lY3Rvci5wcm92aWRlcnMpXG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy53ZWIzV2FsbGV0Q29ubmVjdG9yLnByb3ZpZGVyQ29udHJvbGxlci5vbihDT05ORUNUX0VWRU5ULCBwcm92aWRlciA9PiB7XG4gICAgICAgIHJlc29sdmUocHJvdmlkZXIpO1xuICAgICAgfSk7XG4gIFxuICAgICAgdGhpcy53ZWIzV2FsbGV0Q29ubmVjdG9yLnByb3ZpZGVyQ29udHJvbGxlci5vbihFUlJPUl9FVkVOVCwgZXJyb3IgPT4ge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2hvdWxkT3Blbi5uZXh0KHRydWUpXG5cbiAgICAgIHRoaXMuc2hvdWxkT3Blbi5waXBlKHRha2UoMSkpLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IChvcGVuKSA9PiB7XG4gICAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgICByZWplY3QoJ0Rpc21pc3NlZCBtb2RhbCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH0pXG4gIH1cblxuICBzZXRDb25maWd1cmF0aW9uKG9wdGlvbnM6IElQcm92aWRlckNvbnRyb2xsZXJPcHRpb25zKSB7XG4gICAgdGhpcy53ZWIzV2FsbGV0Q29ubmVjdG9yLnNldENvbmZpZ3VyYXRpb24ob3B0aW9ucylcbiAgfVxuXG4gIGNsZWFyQ2FjaGVkUHJvdmlkZXIoKTogdm9pZCB7XG4gICAgdGhpcy53ZWIzV2FsbGV0Q29ubmVjdG9yLnByb3ZpZGVyQ29udHJvbGxlci5jbGVhckNhY2hlZFByb3ZpZGVyKCk7XG4gIH1cblxuICBzZXRDYWNoZWRQcm92aWRlcihpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy53ZWIzV2FsbGV0Q29ubmVjdG9yLnByb3ZpZGVyQ29udHJvbGxlci5zZXRDYWNoZWRQcm92aWRlcihpZCk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLnNob3VsZE9wZW4ubmV4dChmYWxzZSlcbiAgfVxufVxuIl19